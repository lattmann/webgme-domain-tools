/* Generated file based on ejs templates */
define([], function() {
    return {
    "default.svg.ejs": "<svg width=\"150\" height=\"45\" xmlns=\"http://www.w3.org/2000/svg\">\r\n <g>\r\n  <rect fill=\"#ececec\" stroke-width=\"2\" x=\"1\" y=\"1\" width=\"148\" height=\"43\" stroke=\"#000\"/>\r\n  <text fill=\"#191919\" stroke-width=\"0\" stroke-opacity=\"null\" x=\"75\" y=\"25\" font-size=\"10\" text-anchor=\"middle\" stroke=\"#000\">&gt;&gt; <%= decorator.name %>Decorator &lt;&lt;</text>\r\n </g>\r\n</svg>",
    "TemplateDecorator.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n\"use strict\";\r\n\r\ndefine(['js/Decorators/DecoratorBase',\r\n    './DiagramDesigner/<%= decorator.name %>Decorator.DiagramDesignerWidget',\r\n    './PartBrowser/<%= decorator.name %>Decorator.PartBrowserWidget'], function (\r\n                                                           DecoratorBase,\r\n                                                           <%= decorator.name %>DecoratorDiagramDesignerWidget,\r\n                                                           <%= decorator.name %>DecoratorPartBrowserWidget) {\r\n\r\n    /**\r\n    * A module representing a decorator for the PN Modeling Language.\r\n    * @exports <%= decorator.name %>Decorator\r\n    * @version 1.0\r\n    */\r\n    var <%= decorator.name %>Decorator,\r\n        __parent__ = DecoratorBase,\r\n        __parent_proto__ = DecoratorBase.prototype,\r\n        DECORATOR_ID = \"<%= decorator.name %>Decorator\";\r\n\r\n    /**\r\n     * Represents a <%= decorator.name %>Decorator factory.\r\n     * @constructor\r\n     * @param {object} params Parameters for this object.\r\n     */\r\n    <%= decorator.name %>Decorator = function (params) {\r\n        var opts = _.extend( {\"loggerName\": this.DECORATORID}, params);\r\n\r\n        __parent__.apply(this, [opts]);\r\n\r\n        this.logger.debug(\"<%= decorator.name %>Decorator ctor\");\r\n    };\r\n\r\n    _.extend(<%= decorator.name %>Decorator.prototype, __parent_proto__);\r\n    <%= decorator.name %>Decorator.prototype.DECORATORID = DECORATOR_ID;\r\n\r\n    /*********************** OVERRIDE DecoratorBase MEMBERS **************************/\r\n\r\n    /**\r\n     * Initializes the supported widget map for this decorator.\r\n     *\r\n     * @see <%= decorator.name %>DecoratorDiagramDesignerWidget:<%= decorator.name %>DecoratorDiagramDesignerWidget\r\n     * @see <%= decorator.name %>DecoratorPartBrowserWidget:<%= decorator.name %>DecoratorPartBrowserWidget\r\n     */\r\n    <%= decorator.name %>Decorator.prototype.initializeSupportedWidgetMap = function () {\r\n        this.supportedWidgetMap = {'DiagramDesigner': <%= decorator.name %>DecoratorDiagramDesignerWidget,\r\n                                   'PartBrowser': <%= decorator.name %>DecoratorPartBrowserWidget};\r\n    };\r\n\r\n    return <%= decorator.name %>Decorator;\r\n});\r\n",
    "TemplateDecorator.PartBrowserWidget.css.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n.<%= decorator.name %>-decorator {\r\n  text-align: center; }\r\n  .<%= decorator.name %>-decorator text.port-name {\r\n    fill: #000;\r\n    font-size: 11px; }\r\n    .<%= decorator.name %>-decorator text.port-name.right {\r\n      text-anchor: end; }\r\n  .<%= decorator.name %>-decorator .name {\r\n    display: block;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 22px;\r\n    width: auto; }\r\n  .<%= decorator.name %>-decorator .connector {\r\n    background-color: #fefefe;\r\n    height: 10px;\r\n    width: 10px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    border: 1px solid blue;\r\n    border-radius: 0px;\r\n    left: 50%; }\r\n    .<%= decorator.name %>-decorator .connector:hover {\r\n      border-color: rgba(82, 168, 236, 0.8);\r\n      -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6); }\r\n    .<%= decorator.name %>-decorator .connector.top {\r\n      top: -6px; }\r\n    .<%= decorator.name %>-decorator .connector.bottom {\r\n      bottom: -6px; }\r\n  .<%= decorator.name %>-decorator .connector-container {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    transform-origin: 0 0;\r\n    -webkit-transform-origin: 0 0;\r\n    -moz-transform-origin: 0 0; }\r\n\r\n.designer-item.selected .<%= decorator.name %>-decorator {\r\n  background-color: rgba(219, 234, 252, 0.5); }\r\n",
    "TemplateDecorator.PartBrowserWidget.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n\"use strict\";\r\n\r\ndefine(['js/Constants',\r\n    'js/Utils/METAAspectHelper',\r\n    'js/NodePropertyNames',\r\n    'js/Widgets/PartBrowser/PartBrowserWidget.DecoratorBase',\r\n    '../Core/<%= decorator.name %>Decorator.Core.js',\r\n    '../Core/<%= decorator.name %>Decorator.Constants',\r\n    'css!./<%= decorator.name %>Decorator.PartBrowserWidget'], function (CONSTANTS,\r\n                                                       METATypesHelper,\r\n                                                       nodePropertyNames,\r\n                                                       PartBrowserWidgetDecoratorBase,\r\n                                                       <%= decorator.name %>DecoratorCore,\r\n                                                       <%= decorator.name %>DecoratorConstants) {\r\n\r\n    /**\r\n     * A module representing PartBrowserWidget specific functionality for the <%= decorator.name %>ModelingLanguage.\r\n     * @exports <%= decorator.name %>DecoratorPartBrowserWidget\r\n     * @version 1.0\r\n     */\r\n    var <%= decorator.name %>DecoratorPartBrowserWidget,\r\n        DECORATOR_ID = \"<%= decorator.name %>DecoratorPartBrowserWidget\";\r\n\r\n    /**\r\n     * Initializes a new instance of <%= decorator.name %>DecoratorPartBrowserWidget\r\n     * @param options {object} options for initialization\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>DecoratorPartBrowserWidget = function (options) {\r\n        var opts = _.extend( {}, options);\r\n\r\n        PartBrowserWidgetDecoratorBase.apply(this, [opts]);\r\n\r\n        // Part browser widget does not support creating connections therefore do not render connectors\r\n        this._initializeDecorator({\"connectors\": false});\r\n\r\n        this.logger.debug(\"<%= decorator.name %>DecoratorPartBrowserWidget ctor\");\r\n    };\r\n\r\n\r\n    /************************ INHERITANCE *********************/\r\n    _.extend(<%= decorator.name %>DecoratorPartBrowserWidget.prototype, PartBrowserWidgetDecoratorBase.prototype);\r\n    _.extend(<%= decorator.name %>DecoratorPartBrowserWidget.prototype, <%= decorator.name %>DecoratorCore.prototype);\r\n\r\n\r\n    /**************** OVERRIDE INHERITED / EXTEND ****************/\r\n\r\n    /**** Override from PartBrowserWidgetDecoratorBase ****/\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.DECORATORID = DECORATOR_ID;\r\n\r\n    /**\r\n     * Called before appending the element to the part browser. Renders content for the part browser.\r\n     */\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.beforeAppend = function () {\r\n        this.$el = this.$DOMBase.clone();\r\n\r\n        this._hideName = true;\r\n\r\n        this._renderContent();\r\n    };\r\n\r\n\r\n    /**\r\n     * Called after element is appended to the part browser. Currently this method does nothing.\r\n     */\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype.afterAppend = function () {\r\n\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype._registerForNotification = function(portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.registerComponentIDForPartID(portId, partId);\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorPartBrowserWidget.prototype._unregisterForNotification = function(portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.unregisterComponentIDFromPartID(portId, partId);\r\n    };\r\n\r\n    return <%= decorator.name %>DecoratorPartBrowserWidget;\r\n});",
    "TemplateDecorator.PartBrowserWidget.scss.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n//imports\r\n@import \"../Core/_<%= decorator.name %>DecoratorCore\";\r\n\r\n//include ModelDecoratorCore style\r\n@include <%= decorator.name %>_decorator_core;\r\n",
    "TemplateDiagram.svg.ejs": "<svg width=\"170\" height=\"60\" xmlns=\"http://www.w3.org/2000/svg\">\r\n <g class=\"ports\">\r\n </g>\r\n <g>\r\n  <rect height=\"60\" width=\"130\" y=\"0\" x=\"20\" stroke-width=\"1.5\" stroke=\"#050505\" fill=\"#f8f8f8\"/>\r\n </g>\r\n <g class=\"port-names\">\r\n   <text class=\"port-name\"></text>\r\n </g>\r\n</svg>",
    "TemplateDiagramFolder.svg.ejs": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\"  >\r\n<g id=\"bunch\" data-iconmelon=\"Minicons Free Vector Icons Pack:79d4c41f66d2ffe417dab3275af0414a\">\r\n              <g>\r\n                <rect x=\"12\" y=\"3\" width=\"20\" height=\"14\"></rect>\r\n                <polygon points=\"10,9 6,9 6,23 26,23 26,19 10,19 \t\"></polygon>\r\n                <polygon points=\"4,15 0,15 0,29 20,29 20,25 4,25 \t\"></polygon>\r\n              </g>\r\n            </g>\r\n</svg>\r\n",
    "TemplateMetaModel.svg.ejs": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\">\r\n<g id=\"flow-merge\" data-iconmelon=\"Typicons:ea2afc8e1844805d2bdac9325c9ee66f\">\r\n              <g id=\"flow-merge\">\r\n                <g id=\"Layer_1_16_\">\r\n                  <path  d=\"M25.6,22.693v-2.961c0-3.089-2.512-5.6-5.6-5.6c-1.323,0-2.4-1.077-2.4-2.4V9.306\r\n\t\t\tc1.858-0.664,3.2-2.423,3.2-4.506C20.8,2.154,18.646,0,16,0c-2.646,0-4.8,2.154-4.8,4.8c0,2.083,1.342,3.842,3.199,4.504v2.429\r\n\t\t\tc0,1.323-1.076,2.4-2.399,2.4c-3.089,0-5.601,2.511-5.601,5.6v2.961C4.542,23.359,3.2,25.117,3.2,27.2C3.2,29.847,5.354,32,8,32\r\n\t\t\ts4.8-2.153,4.8-4.8c0-2.083-1.342-3.841-3.199-4.507v-2.961c0-1.323,1.076-2.399,2.399-2.399c1.566,0,2.983-0.651,4-1.693\r\n\t\t\tc1.018,1.042,2.435,1.693,4,1.693c1.323,0,2.4,1.076,2.4,2.399v2.961c-1.858,0.666-3.2,2.424-3.2,4.507c0,2.646,2.153,4.8,4.8,4.8\r\n\t\t\ts4.8-2.153,4.8-4.8C28.8,25.117,27.458,23.359,25.6,22.693z M8,28.8c-0.883,0-1.601-0.719-1.601-1.6\r\n\t\t\tC6.399,26.318,7.117,25.6,8,25.6s1.601,0.719,1.601,1.601C9.601,28.081,8.883,28.8,8,28.8z M16,3.2c0.883,0,1.6,0.719,1.6,1.6\r\n\t\t\tc0,0.881-0.717,1.6-1.6,1.6s-1.601-0.719-1.601-1.6C14.399,3.919,15.117,3.2,16,3.2z M24,28.8c-0.883,0-1.6-0.719-1.6-1.6\r\n\t\t\tc0-0.882,0.717-1.601,1.6-1.601s1.6,0.719,1.6,1.601C25.6,28.081,24.883,28.8,24,28.8z\"></path>\r\n                </g>\r\n              </g>\r\n            </g>\r\n</svg>\r\n",
    "TemplateDecorator.DiagramDesignerWidget.css.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n.<%= decorator.name %>-decorator {\r\n  text-align: center; }\r\n  .<%= decorator.name %>-decorator text.port-name {\r\n    fill: #000;\r\n    font-size: 11px; }\r\n    .<%= decorator.name %>-decorator text.port-name.right {\r\n      text-anchor: end; }\r\n  .<%= decorator.name %>-decorator .name {\r\n    display: block;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 22px;\r\n    width: auto; }\r\n  .<%= decorator.name %>-decorator .connector {\r\n    background-color: #fefefe;\r\n    height: 10px;\r\n    width: 10px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    border: 1px solid blue;\r\n    border-radius: 0px;\r\n    left: 50%; }\r\n    .<%= decorator.name %>-decorator .connector:hover {\r\n      border-color: rgba(82, 168, 236, 0.8);\r\n      -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\r\n      box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6); }\r\n    .<%= decorator.name %>-decorator .connector.top {\r\n      top: -6px; }\r\n    .<%= decorator.name %>-decorator .connector.bottom {\r\n      bottom: -6px; }\r\n  .<%= decorator.name %>-decorator .connector-container {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    transform-origin: 0 0;\r\n    -webkit-transform-origin: 0 0;\r\n    -moz-transform-origin: 0 0; }\r\n\r\n.designer-item.selected .<%= decorator.name %>-decorator {\r\n  background-color: rgba(219, 234, 252, 0.5); }\r\n",
    "TemplateDecorator.DiagramDesignerWidget.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n\"use strict\";\r\n\r\ndefine(['js/Constants',\r\n    'js/Utils/METAAspectHelper',\r\n    'js/NodePropertyNames',\r\n    'js/Widgets/DiagramDesigner/DiagramDesignerWidget.DecoratorBase',\r\n    '../Core/<%= decorator.name %>Decorator.Core.js',\r\n    '../Core/<%= decorator.name %>Decorator.Constants',\r\n    'js/Widgets/DiagramDesigner/DiagramDesignerWidget.Constants',\r\n    'css!./<%= decorator.name %>Decorator.DiagramDesignerWidget'], function (CONSTANTS,\r\n                                                       METAAspectHelper,\r\n                                                       nodePropertyNames,\r\n                                                       DiagramDesignerWidgetDecoratorBase,\r\n                                                       <%= decorator.name %>DecoratorCore,\r\n                                                       <%= decorator.name %>DecoratorConstants,\r\n                                                       DiagramDesignerWidgetConstants) {\r\n    /**\r\n    * A module representing DiagramDesignerWidget specific functionality for the <%= decorator.name %>ModelingLanguage.\r\n    * @exports <%= decorator.name %>DecoratorDiagramDesignerWidget\r\n    * @version 1.0\r\n    */\r\n    var <%= decorator.name %>DecoratorDiagramDesignerWidget,\r\n        DECORATOR_ID = \"<%= decorator.name %>DecoratorDiagramDesignerWidget\";\r\n\r\n    /**\r\n     * Initializes a new instance of <%= decorator.name %>DecoratorDiagramDesignerWidget\r\n     * @param options {object} options for initialization\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget = function (options) {\r\n        var opts = _.extend( {}, options);\r\n\r\n        DiagramDesignerWidgetDecoratorBase.apply(this, [opts]);\r\n\r\n        // this widget supports connectors and connections\r\n        this._initializeDecorator({\"connectors\": true});\r\n\r\n        this.logger.debug(\"<%= decorator.name %>DecoratorDiagramDesignerWidget ctor\");\r\n    };\r\n\r\n    _.extend(<%= decorator.name %>DecoratorDiagramDesignerWidget.prototype, DiagramDesignerWidgetDecoratorBase.prototype);\r\n    _.extend(<%= decorator.name %>DecoratorDiagramDesignerWidget.prototype, <%= decorator.name %>DecoratorCore.prototype);\r\n\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.DECORATORID = DECORATOR_ID;\r\n\r\n    /*********************** OVERRIDE DECORATORBASE MEMBERS **************************/\r\n\r\n    /**\r\n     * Called when a new element is added to the widget\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.on_addTo = function () {\r\n        var self = this,\r\n            META_TYPES = METAAspectHelper.getMETAAspectTypes();\r\n\r\n        this._hideName = false;\r\n        this._renderContent();\r\n\r\n        if ((this._metaType === METAAspectHelper.isMETAType(META_TYPES.<%= decorator.name %>Base)) &&\r\n            (METAAspectHelper.getMETATypesOf(this._gmeID)[0] !== this._gmeID)) {\r\n\r\n            this.$name.remove();\r\n        } else {\r\n            // set name editable on double-click\r\n            if (this.$name) {\r\n                this.$name.on(\"dblclick.editOnDblClick\", null, function (event) {\r\n                    if (self.hostDesignerItem.canvas.getIsReadOnlyMode() !== true) {\r\n                        self.hostDesignerItem.canvas.selectNone();\r\n                        $(this).editInPlace({\"class\": \"\",\r\n                            \"onChange\": function (oldValue, newValue) {\r\n                                self._onNodeTitleChanged(oldValue, newValue);\r\n                            }});\r\n                    }\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows all source connectors.\r\n     * @param params {String[]} Registered connector IDs to show.\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.showSourceConnectors = function (params) {\r\n        this.logger.debug('showSourceConnectors: ' + JSON.stringify(params));\r\n        this.$sourceConnectors.show();\r\n    };\r\n\r\n    /**\r\n     * Hides the source 'connectors' - detaches them from the DOM\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.hideSourceConnectors = function () {\r\n        this.$sourceConnectors.hide();\r\n    };\r\n\r\n    /**\r\n     * Shows all end (destination) connectors.\r\n     * @param params {String[]} Registered connector IDs to show.\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.showEndConnectors = function (params) {\r\n        this.logger.debug('showEndConnectors: ' + JSON.stringify(params));\r\n\r\n        // TODO: elements from same <%= decorator.name %> domain could be connected\r\n        this.$endConnectors.show();\r\n    };\r\n\r\n    /**\r\n     * Hides the end (destination) 'connectors' - detaches them from the DOM\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.hideEndConnectors = function () {\r\n        this.$endConnectors.hide();\r\n    };\r\n\r\n    /**\r\n     * Initializes all connectors then hides them.\r\n     */\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.initializeConnectors = function () {\r\n\r\n        //find connectors\r\n        this.$sourceConnectors = this.$el.find('.' + DiagramDesignerWidgetConstants.CONNECTOR_CLASS);\r\n        this.$endConnectors = this.$el.find('.' + DiagramDesignerWidgetConstants.CONNECTOR_CLASS);\r\n\r\n        // hide all connectors by default\r\n        this.hideSourceConnectors();\r\n        this.hideEndConnectors();\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype._registerForNotification = function(portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.registerComponentIDForPartID(portId, partId);\r\n    };\r\n\r\n\r\n    /**** Override from ModelDecoratorCore ****/\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype._unregisterForNotification = function(portId) {\r\n        var partId = this._metaInfo[CONSTANTS.GME_ID];\r\n\r\n        this._control.unregisterComponentIDFromPartID(portId, partId);\r\n    };\r\n\r\n    <%= decorator.name %>DecoratorDiagramDesignerWidget.prototype.notifyComponentEvent = function (componentList) {\r\n        this.update();\r\n    };\r\n\r\n    return <%= decorator.name %>DecoratorDiagramDesignerWidget;\r\n});\r\n",
    "TemplateDecorator.DiagramDesignerWidget.scss.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n * Authors:\r\n */\r\n\r\n//imports\r\n@import \"../Core/_<%= decorator.name %>DecoratorCore\";\r\n\r\n//include ModelDecoratorCore style\r\n@include <%= decorator.name %>_decorator_core;",
    "TemplateBase.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n */\r\n\r\n\"use strict\";\r\n\r\ndefine(['js/NodePropertyNames',\r\n        'js/Utils/METAAspectHelper',\r\n        './<%= decorator.name %>Decorator.Constants',\r\n        './<%= decorator.name %>.META',\r\n        'js/Widgets/DiagramDesigner/DiagramDesignerWidget.Constants',\r\n        'js/Constants'], function (nodePropertyNames,\r\n                                   METAAspectHelper,\r\n                                   <%= decorator.name %>DecoratorConstants,\r\n                                   <%= decorator.name %>META,\r\n                                   DiagramDesignerWidgetConstants,\r\n                                   CONSTANTS) {\r\n\r\n    /**\r\n     * A module representing <%= decorator.name %>Base decorator functionality for the <%= decorator.name %>ModelingLanguage.\r\n     * @exports <%= decorator.name %>Base\r\n     * @version 1.0\r\n     */\r\n    var <%= decorator.name %>Base;\r\n\r\n    /**\r\n     * Initializes a new instance of <%= decorator.name %>Base.\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>Base = function () {\r\n\r\n    };\r\n\r\n    /**\r\n     * Renders and updates the ports for this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>Base.prototype._updatePorts = function () {\r\n        var portId,\r\n            len = 4,\r\n            gmeID = this._metaInfo[CONSTANTS.GME_ID],\r\n            META_TYPES = <%= decorator.name %>META.META_TYPES, \r\n            SVGWidth = parseInt(this.skinParts.$svg.attr('width')),\r\n            SVGHeight = parseInt(this.skinParts.$svg.attr('height')),\r\n            PortWidth = <%= decorator.name %>DecoratorConstants.PORT_WIDTH;\r\n\r\n        // reinitialize the port coordinates with an empty object\r\n        this._connectionAreas = {};    \r\n        this.skinParts.$connectorContainer.empty();\r\n\r\n    \t// positioning the connectors' connection areas\r\n\r\n         // TOP\r\n        this._connectionAreas[0] = {\r\n            \"x1\": SVGWidth / 2,\r\n            \"y1\": 0\r\n        }\r\n        // BOTTOM\r\n        this._connectionAreas[1] = {\r\n            \"x1\": SVGWidth / 2,\r\n            \"y1\": SVGHeight\r\n        }   \r\n        // LEFT\r\n        this._connectionAreas[2] = {\r\n            \"x1\": 0,\r\n            \"y1\": SVGHeight / 2\r\n        }\r\n        // RIGHT\r\n        this._connectionAreas[3] = {\r\n            \"x1\": SVGWidth,\r\n            \"y1\": SVGHeight / 2\r\n        }\r\n\r\n        while(len--) {\r\n            \r\n            portId = 3 - len;\r\n            // render connector\r\n            var connectorE = $('<div/>', {'class': DiagramDesignerWidgetConstants.CONNECTOR_CLASS});\r\n\r\n            if (portId === 3) {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.RIGHT_PORT_CLASS);\r\n            } else if (portId === 2) {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.LEFT_PORT_CLASS);\r\n            } else if (portId === 1 || portId === 4 || portId === 5) {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.BOTTOM_PORT_CLASS);\r\n            } else {\r\n                connectorE.addClass(<%= decorator.name %>DecoratorConstants.TOP_PORT_CLASS);\r\n            }\r\n\r\n            connectorE.css({\r\n                    'top': this._connectionAreas[portId].y1 - PortWidth,\r\n                    'left': this._connectionAreas[portId].x1 - PortWidth\r\n                });\r\n\r\n            if (this._displayConnectors) {\r\n\r\n                // register connectors for creating connections\r\n                if (this.hostDesignerItem) {\r\n                    this.hostDesignerItem.registerConnectors(connectorE);\r\n                } else {\r\n                    this.logger.error(\"Decorator's hostDesignerItem is not set\");\r\n                }\r\n\r\n                this.skinParts.$connectorContainer.append(connectorE);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Renders the object based on the meta type.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>Base.prototype._renderMetaTypeSpecificParts = function () {\r\n\r\n    };\r\n\r\n    /**\r\n     * Gets the connection areas for all connectors associated with this object including ports if there is any.\r\n     * @param id {string} GME id of the port, null if connections has to be specified for this object.\r\n     * @param isEnd {boolean} True if id object is the end point of the connection.\r\n     * @param connectionMetaInfo {object} Source object's meta information.\r\n     * @returns {Array} Connection areas to/from connections can be drawn.\r\n     */\r\n    <%= decorator.name %>Base.prototype.getConnectionAreas = function (id/*, isEnd, connectionMetaInfo*/) {\r\n\r\n    \tvar result = [],\r\n            LEN = 10, // length of stem that can stick out of the connector before connections can turn \r\n            ANGLES = [270, 90, 180, 0], // L, R, T, B\r\n            gmeID = this._metaInfo[CONSTANTS.GME_ID],\r\n            META_TYPES = <%= decorator.name %>META.META_TYPES;\r\n\r\n        //by default return the bounding box edges midpoints\r\n\r\n        if (id === undefined || id === this.hostDesignerItem.id) {\r\n            \r\n            for (var i = 0; i < ANGLES.length; i++) {\r\n\r\n                result.push( {\"id\": i,\r\n                    \"x1\": this._connectionAreas[i].x1, // x's and y's determine the lines where connections can be drawn on\r\n                    \"y1\": this._connectionAreas[i].y1,\r\n                    \"x2\": this._connectionAreas[i].x1,\r\n                    \"y2\": this._connectionAreas[i].y1,\r\n                    \"angle1\": ANGLES[i], // angles determine from which direction between two angles connections can be drawn\r\n                    \"angle2\": ANGLES[i],\r\n                    \"len\": LEN} );\r\n            } \r\n            \r\n        }\r\n        \r\n        return result;\r\n    };\r\n\r\n    return <%= decorator.name %>Base;\r\n});\r\n",
    "TemplateDecorator.Constants.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n *\r\n */\r\n\r\n\r\n\"use strict\";\r\n\r\ndefine([], function () {\r\n\r\n    return {\r\n        TOP_PORT_CLASS: \"top-port\",\r\n        BOTTOM_PORT_CLASS: \"bottom-port\",\r\n        LEFT_PORT_CLASS: \"left-port\",\r\n        RIGHT_PORT_CLASS: \"right-port\",\r\n        CENTER_PORT_CLASS: \"center-port\",\r\n        PORT_WIDTH: 6,\r\n        MIN_WIDTH: 80,\r\n        DEFAULT_NAME_WIDTH: 160,\r\n        HEIGHT: 22,\r\n        NAME_DIV_FIXTURE: 6,\r\n        BAR_WIDTH: \"Width\"\r\n    };\r\n});",
    "TemplateDecorator.Core.js.ejs": "/*\r\n * Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n * \r\n */\r\n\r\n\"use strict\";\r\n\r\ndefine(['js/Constants',\r\n    'js/Utils/METAAspectHelper',\r\n    'js/NodePropertyNames',\r\n    'js/RegistryKeys',\r\n    './<%= decorator.name %>Base',\r\n    './<%= decorator.name %>.META',\r\n    './<%= decorator.name %>Decorator.Constants',\r\n    'text!./<%= decorator.name %>Decorator.html',\r\n    'text!../default.svg'], function (CONSTANTS,\r\n                                      METAAspectHelper,\r\n                                      nodePropertyNames,\r\n                                      REGISTRY_KEYS,\r\n                                      <%= decorator.name %>Base,\r\n                                      <%= decorator.name %>META,\r\n                                      ADConstants,\r\n                                      <%= decorator.name %>DecoratorTemplate,\r\n                                      DefaultSvgTemplate) {\r\n\r\n    /**\r\n    * A module representing core decorator functionality for the <%= decorator.name %>ModelingLanguage.\r\n    * @exports <%= decorator.name %>DecoratorCore\r\n    * @version 1.0\r\n    */\r\n    var <%= decorator.name %>DecoratorCore,\r\n        SVG_ICON_PATH = \"/decorators/<%= decorator.name %>Decorator/Icons/\";\r\n\r\n    /**\r\n     * Contains downloaded svg elements from the server.\r\n     * @type {{}}\r\n     * @private\r\n     */\r\n    var svgCache = {};\r\n\r\n    /**\r\n     * Svg element that can be used as a placeholder for the icon if the icon does not exist on the server.\r\n     * @type {*|jQuery|HTMLElement}\r\n     * @private\r\n     */\r\n    var errorSVGBase = $(DefaultSvgTemplate);\r\n\r\n    /**\r\n     * ID list of meta types.\r\n     * @type {*}\r\n     * @private\r\n     */\r\n    var _metaAspectTypes = <%= decorator.name %>META.META_TYPES;\r\n\r\n    for (var m in _metaAspectTypes) {\r\n        // TODO: use the right code to do this\r\n        if (_metaAspectTypes.hasOwnProperty(m)) {\r\n\r\n            // get the svg's url on the server for this META type\r\n            var svg_resource_url = SVG_ICON_PATH + m + \".svg\";\r\n\r\n            // get the svg from the server in SYNC mode, may take some time\r\n            $.ajax(svg_resource_url, {'async': false})\r\n                .done(function ( data ) {\r\n\r\n                    // TODO: console.debug('Successfully downloaded: ' + svg_resource_url + ' for ' + metaType);\r\n                    // downloaded successfully\r\n                    // cache the downloaded content\r\n                    svgCache[m] = $(data.childNodes[0]);\r\n                })\r\n                .fail(function () {\r\n\r\n                    // download failed for this type\r\n                    // TODO: console.warning('Failed to download: ' + svg_resource_url);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of <%= decorator.name %>DecoratorCore.\r\n     * @constructor\r\n     */\r\n    <%= decorator.name %>DecoratorCore = function () {\r\n    };\r\n\r\n    /**\r\n     * Represents the base element that would be inserted into the DOM.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.$DOMBase = (function () {\r\n        var el = $(<%= decorator.name %>DecoratorTemplate);\r\n        //use the same HTML template as the DefaultDecorator.DiagramDesignerWidget\r\n        //but remove the connector DOM elements since they are not needed in the PartBrowser\r\n        //el.find('div.name').remove();\r\n        return el;\r\n    })();\r\n\r\n    /**** Override from *.WidgetDecoratorBase ****/\r\n\t<%= decorator.name %>DecoratorCore.prototype.getTerritoryQuery = function () {\r\n        var territoryRule = {};\r\n\r\n        territoryRule[this._metaInfo[CONSTANTS.GME_ID]] = { \"children\": 1 };\r\n\r\n        return territoryRule;\r\n    };\r\n\r\n    /**\r\n     * Initializes decorator.\r\n     * @param params {object}  parameters for initialization\r\n     * @param params.connectors {boolean} True if connectors have to be rendered otherwise false.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._initializeDecorator = function (params) {\r\n        this.$name = undefined;\r\n\r\n        this._displayConnectors = false;\r\n        if (params && params.connectors) {\r\n            this._displayConnectors = params.connectors;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Downloads and caches the svg files for a given METAType based on a gmeID\r\n     * @param gmeID {string} An ID of the GME object.\r\n     * @returns {*|jQuery|HTMLElement} SVG element that should be displayed.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.getSVGByMetaType = function (gmeID) {\r\n\r\n        // define local variables\r\n        var <%= decorator.name %>ClassNames,\r\n            <%= decorator.name %>ClassName,\r\n            returnSVG,\r\n            len;\r\n\r\n        // get all META types for the given GME object including inheritance in the meta model\r\n        <%= decorator.name %>ClassNames = METAAspectHelper.getMETATypesOf(gmeID);\r\n\r\n        // reverse the list since the iteration is backwards in the while loop\r\n        <%= decorator.name %>ClassNames.reverse();\r\n\r\n        // length of the list on which the iteration is performed\r\n        len = <%= decorator.name %>ClassNames.length;\r\n\r\n        // iterate through the list from the last element to the first one\r\n        while (len--) {\r\n            // get current the META type name\r\n            <%= decorator.name %>ClassName = <%= decorator.name %>ClassNames[len];\r\n\r\n            if (<%= decorator.name %>ClassName === undefined || <%= decorator.name %>ClassName === null || <%= decorator.name %>ClassName === \"\") {\r\n\r\n                // if the META type name is invalid return with an error SVG\r\n                returnSVG = errorSVGBase.clone();\r\n\r\n            } else if (<%= decorator.name %>ClassName != \"Action\"){\r\n\r\n                // META type name is valid\r\n                if (svgCache[<%= decorator.name %>ClassName]) {\r\n\r\n                    returnSVG = svgCache[<%= decorator.name %>ClassName].clone();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (returnSVG === undefined) {\r\n\r\n            // if svg is not defined use the default error svg\r\n            returnSVG = errorSVGBase.clone();\r\n        }\r\n\r\n        return returnSVG;\r\n    };\r\n\r\n    /**\r\n     * Gets a clone of an error svg icon.\r\n     * @returns {*|jQuery|HTMLElement} Error svg icon.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.getErrorSVG = function () {\r\n\r\n        return this._errorSVGBase.clone();\r\n    };\r\n\r\n    /**\r\n     * @todo Not implemented yet.\r\n     * @param searchDesc {string} Search description or query.\r\n     * @returns {boolean} True if this object satisfies the search condition.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.doSearch = function (searchDesc) {\r\n\r\n        //TODO: correct implementation needed\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Renders the content in the placeholder DOM element.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._renderContent = function () {\r\n\r\n        // gme id of the rendered object\r\n        var gmeID = this._metaInfo[CONSTANTS.GME_ID],\r\n            META_TYPES = <%= decorator.name %>META.META_TYPES;\r\n\r\n        // meta type of the rendered object\r\n        this._metaType = METAAspectHelper.getMETATypesOf(gmeID)[0];\r\n\r\n        if (DEBUG) {\r\n\r\n            //render GME-ID in the DOM, for debugging\r\n            this.$el.attr({\"data-id\": gmeID});\r\n        }\r\n\r\n\r\n        // setting the name of component\r\n        this.skinParts.$name = this.$el.find('.name');\r\n\r\n        \r\n        //empty out SVG container\r\n        this.$el.find('.svg-container').empty();\r\n\r\n        //figure out the necessary SVG based on children type\r\n        this.skinParts.$svg = this.getSVGByMetaType(gmeID);\r\n\r\n        if (this.skinParts.$svg) {\r\n\r\n            //this.skinParts.$svg.append(this._<%= decorator.name %>DecoratorCore.getPortSVG());\r\n            this.$el.find('.svg-container').append(this.skinParts.$svg);\r\n\r\n            //render the connectors\r\n            this.skinParts.$connectorContainer = this.$el.find('.connector-container');\r\n            this.skinParts.$connectorContainer.empty();\r\n\r\n        } else {\r\n\r\n            // append error svg if the svg does not exist for this element\r\n            this.$el.find('.svg-container').append(this.getErrorSVG());\r\n        }\r\n        \r\n        \r\n        \t_.extend(this, new <%= decorator.name %>Base());\r\n\r\n        // call the type specific renderer\r\n        this._renderMetaTypeSpecificParts();\r\n\r\n        // update the rendered object\r\n        this.update();\r\n    };\r\n\r\n\r\n    /**\r\n     * Updates the rendered object. This function is called by the Widget.\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype.update = function () {\r\n\r\n        // internal update function\r\n        this._update();\r\n\r\n        if (this._displayConnectors) {\r\n\r\n            // initializes the connectors if they have to be displayed.\r\n            this.initializeConnectors();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates the rendered object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._update = function () {\r\n\r\n        // update name of the rendered object\r\n        this._updateName();\r\n        this._updatePorts();\r\n    };\r\n\r\n\r\n    <%= decorator.name %>DecoratorCore.prototype._updateColors = function () {\r\n        this._getNodeColorsFromRegistry();\r\n\r\n        if (this.fillColor) {\r\n            this.skinParts.$svg.find('path').attr('fill', this.fillColor);\r\n            this.skinParts.$svg.find('ellipse').attr('fill', this.fillColor);\r\n            this.skinParts.$svg.find('rect').attr('fill', this.fillColor);\r\n        } else {\r\n            this.$el.css({'background-color': ''});\r\n        }\r\n\r\n        if (this.borderColor) {\r\n            this.skinParts.$svg.css({'border-color': this.borderColor,\r\n                          'box-shadow': '0px 0px 7px 0px ' + this.borderColor + ' inset'});\r\n            this.skinParts.$name.css({'border-color': this.borderColor});\r\n        } else {\r\n            this.$el.css({'border-color': '',\r\n                'box-shadow': ''});\r\n            this.skinParts.$name.css({'border-color': ''});\r\n        }\r\n\r\n        if (this.textColor) {\r\n            this.$el.css({'color': this.textColor});\r\n        } else {\r\n            this.$el.css({'color': ''});\r\n        }\r\n    };\r\n\r\n    <%= decorator.name %>DecoratorCore.prototype._getNodeColorsFromRegistry = function () {\r\n        var objID = this._metaInfo[CONSTANTS.GME_ID];\r\n        this.fillColor = this.preferencesHelper.getRegistry(objID, REGISTRY_KEYS.COLOR, true);\r\n        this.borderColor = this.preferencesHelper.getRegistry(objID, REGISTRY_KEYS.BORDER_COLOR, true);\r\n        this.textColor = this.preferencesHelper.getRegistry(objID, REGISTRY_KEYS.TEXT_COLOR, true);\r\n    };\r\n\r\n    /**\r\n     * Updates the name of the rendered object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._updateName = function () {\r\n\r\n        // initialize local variables\r\n        var control = this._control,\r\n            gmeID = this._metaInfo[CONSTANTS.GME_ID],\r\n            name = (control._client.getNode(gmeID)).getAttribute(nodePropertyNames.Attributes.name), \r\n        \t  META_TYPES = <%= decorator.name %>META.META_TYPES;\r\n\r\n        if (this.skinParts.$name) {\r\n\r\n            // if name exists\r\n            if (name.indexOf('!') == 0) {\r\n\r\n                // if name startswith '!' that means the text has to have an overline\r\n                this.skinParts.$name.text(name.slice(1));\r\n                this.skinParts.$name.css('text-decoration', 'overline');\r\n\r\n            } else {\r\n\r\n                // normal text\r\n                this.skinParts.$name.text(name);\r\n                this.skinParts.$name.css('text-decoration', 'none');\r\n            }\r\n        }\r\n    };\r\n\r\n    /* TO BE OVERRIDDEN IN META TYPE SPECIFIC CODE */\r\n\r\n    /**\r\n     * Renders and updates the ports for this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._updatePorts = function () {\r\n\r\n    };\r\n\r\n    /**\r\n     * Renders the object based on the meta type.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._renderMetaTypeSpecificParts = function () {\r\n\r\n    };\r\n\r\n    /**\r\n     * Registers a GME ID for notifications.\r\n     * @param portId {string} GME ID for getting notification about this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._registerForNotification = function(portId) {\r\n\r\n    };\r\n\r\n    /**\r\n     * Unregisters a GME ID from the event notifications.\r\n     * @param portId {string} GME ID for getting notification about this object.\r\n     * @private\r\n     */\r\n    <%= decorator.name %>DecoratorCore.prototype._unregisterForNotification = function(portId) {\r\n\r\n    };\r\n\r\n\r\n    return <%= decorator.name %>DecoratorCore;\r\n});\r\n",
    "TemplateDecorator.html.ejs": "<div class=\"<%= decorator.name %>-decorator\">\r\n    <div class=\"svg-container\" />\r\n    <div class=\"connector-container\" />\r\n    <div class=\"name\"></div>\r\n</div>",
    "_TemplateDecoratorCore.scss.ejs": "//\r\n// Copyright (C) 2013 Vanderbilt University, All rights reserved.\r\n// \r\n// Author: Robert Kereskenyi\r\n//\r\n\r\n//imports\r\n\r\n@import \"../../../scss/Widgets/DiagramDesigner/Connector\";\r\n\r\n$selected-background-color: rgba(219, 234, 252, 0.5);\r\n\r\n@mixin <%= decorator.name %>_decorator_core {\r\n  .<%= decorator.name %>-decorator {\r\n    text-align: center;\r\n\r\n    text.port-name {\r\n      fill: #000;\r\n      font-size: 11px;\r\n\r\n      &.right {\r\n        text-anchor: end;\r\n      }\r\n    }\r\n\r\n    .name {\r\n      display: block;\r\n      text-align: center;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      height: 22px;\r\n      width: auto;\r\n    }\r\n\r\n    .connector {\r\n      @include connector_basics;\r\n\r\n      border-radius: 0px;\r\n\r\n\r\n      //margin-left: $connector-size / -2;\r\n      left: 50%;\r\n\r\n      &.top {\r\n        top: $connector-size / -2;\r\n      }\r\n\r\n      &.bottom {\r\n        bottom: $connector-size / -2;\r\n      }\r\n\r\n    }\r\n\r\n    .connector-container {\r\n      position: absolute;\r\n      top: 0px;\r\n      left: 0px;\r\n      transform-origin: 0 0;\r\n      -webkit-transform-origin: 0 0;\r\n      -moz-transform-origin: 0 0;\r\n    }\r\n\r\n  }\r\n\r\n  .designer-item {\r\n    &.selected {\r\n      .<%= decorator.name %>-decorator {\r\n        background-color: $selected-background-color;\r\n      }\r\n    }\r\n  }\r\n}",
    "combine_templates.js.ejs": "/*\r\n * Copyright (C) 2014 Vanderbilt University, All rights reserved.\r\n *\r\n * Author: Zsolt Lattmann, Patrik Meijer\r\n *\r\n * This script will combine all ejs files in the current directory (recursively)\r\n * into one Templates.js file. By importing this file as TEMPLATE you can retrieve the\r\n * content of each original ejs file through TEMPLATES['plugin.js.ejs'].\r\n *\r\n * Usage: Run this script in the directory with the ejs-templates, e.g. '%YourPlugin%/Templates'.\r\n */\r\n\r\nvar main = function () {\r\n    'use strict';\r\n    var fs = require('fs'),\r\n        path = require('path'),\r\n        walk = require('walk'),\r\n        walker  = walk.walk('.', { followLinks: false }),\r\n        files = {},\r\n        content = {},\r\n        templateContent;\r\n\r\n    walker.on('file', function (root, stat, next) {\r\n        // Add this file to the list of files\r\n        if (path.extname(stat.name) === '.ejs') {\r\n            files[stat.name] = root + '/' + stat.name;\r\n            content[stat.name] = fs.readFileSync(root + '/' + stat.name, {'encoding': 'utf-8'});\r\n        }\r\n        next();\r\n    });\r\n\r\n    walker.on('end', function () {\r\n        console.log(files);\r\n        console.log(content);\r\n\r\n        templateContent = '';\r\n        templateContent += '/* Generated file based on ejs templates */\\r\\n';\r\n        templateContent += 'define([], function() {\\r\\n';\r\n        templateContent += '    return ' + JSON.stringify(content, null, 4);\r\n        templateContent += '});';\r\n\r\n        fs.writeFileSync('Templates.js', templateContent);\r\n    });\r\n};\r\n\r\nif (require.main === module) {\r\n    main();\r\n}",
    "plugin.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>.\r\n*/\r\n\r\ndefine(['plugin/PluginConfig', 'plugin/PluginBase'<%if (templateType) {%>, 'ejs', 'plugin/<%=pluginID%>/<%=pluginID%>/Templates/Templates'<%}%>], function (PluginConfig, PluginBase<%if (templateType) {%>, EJS, TEMPLATES<%}%>) {\r\n    'use strict';\r\n\r\n    /**\r\n    * Initializes a new instance of <%= pluginID %>.\r\n    * @class\r\n    * @augments {PluginBase}\r\n    * @classdesc This class represents the plugin <%= pluginID %>.\r\n    * @constructor\r\n    */\r\n    var <%= pluginID %> = function () {\r\n        // Call base class' constructor.\r\n        PluginBase.call(this);\r\n    };\r\n\r\n    // Prototypal inheritance from PluginBase.\r\n    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\r\n    <%= pluginID %>.prototype.constructor = <%= pluginID %>;\r\n<%if (templateType) {%>\r\n    if (!ejs) {\r\n        ejs = EJS || window.ejs;\r\n    }\r\n<%}%>\r\n    /**\r\n    * Gets the name of the <%= pluginID %>.\r\n    * @returns {string} The name of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getName = function () {\r\n        return \"<%= pluginName %>\";\r\n    };\r\n\r\n    /**\r\n    * Gets the semantic version (semver.org) of the <%= pluginID %>.\r\n    * @returns {string} The version of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getVersion = function () {\r\n        return \"0.1.0\";\r\n    };<% if (description) {%>\r\n\r\n    /**\r\n    * Gets the description of the <%= pluginID %>.\r\n    * @returns {string} The description of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getDescription = function () {\r\n        return \"<%= description %>\";\r\n    };<%}if (configStructure) {%>\r\n\r\n    /**\r\n    * Gets the configuration structure for the <%= pluginID %>.\r\n    * The ConfigurationStructure defines the configuration for the plugin\r\n    * and will be used to populate the GUI when invoking the plugin from webGME.\r\n    * @returns {object} The version of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getConfigStructure = function () {\r\n        return [\r\n            {\r\n                'name': 'species',\r\n                'displayName': 'Animal Species',\r\n                'regex': '^[a-zA-Z]+$',\r\n                'regexMessage': 'Name can only contain English characters!',\r\n                'description': 'Which species does the animal belong to.',\r\n                'value': 'Horse',\r\n                'valueType': 'string',\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'age',\r\n                'displayName': 'Age',\r\n                'description': 'How old is the animal.',\r\n                'value': 3,\r\n                'valueType': 'number',\r\n                'minValue': 0,\r\n                'maxValue': 10000,\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'carnivor',\r\n                'displayName': 'Carnivor',\r\n                'description': 'Does the animal eat other animals?',\r\n                'value': false,\r\n                'valueType': 'boolean',\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'classification',\r\n                'displayName': 'Classification',\r\n                'description': '',\r\n                'value': 'Vertebrates',\r\n                'valueType': 'string',\r\n                'valueItems': [\r\n                    'Vertebrates',\r\n                    'Invertebrates',\r\n                    'Unknown'\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"color\",\r\n                \"displayName\": \"Color\",\r\n                \"description\": 'The hex color code for the animal.',\r\n                \"readOnly\": false,\r\n                \"value\": '#FF0000',\r\n                \"regex\": '^#([A-Fa-f0-9]{6})$',\r\n                \"valueType\": \"string\"\r\n            }\r\n        ];\r\n    };\r\n<%}%>\r\n\r\n    /**\r\n    * Main function for the plugin to execute. This will perform the execution.\r\n    * Notes:\r\n    * - Always log with the provided logger.[error,warning,info,debug].\r\n    * - Do NOT put any user interaction logic UI, etc. inside this method.\r\n    * - callback always has to be called even if error happened.\r\n    *\r\n    * @param {function(string, plugin.PluginResult)} callback - the result callback\r\n    */\r\n    <%= pluginID %>.prototype.main = function (callback) {\r\n        // Use self to access core, project, result, logger etc from PluginBase.\r\n        // These are all instantiated at this point.\r\n        var self = this;\r\n        // Using the logger.\r\n        self.logger.info('This is a debug message.');\r\n        self.logger.info('This is an info message.');\r\n        self.logger.warning('This is a warning message.');\r\n        self.logger.error('This is an error message.');\r\n<% if (core) {%>\r\n        // Using the coreAPI to create an object.\r\n        var newNode = self.core.createNode({parent: self.rootNode, base: self.META['FCO']});\r\n        self.core.setAttribute(newNode, 'name', 'My new obj');\r\n        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});\r\n<%}\r\nif (configStructure) {%>\r\n        // Obtain the current user configuration.\r\n        var currentConfig = self.getCurrentConfig();\r\n        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));\r\n<%}\r\nif (templateType) {%>\r\n        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.\r\n        // See instructions in file. You must run this after any modifications to the ejs template.\r\n        var template<%=templateExt.toUpperCase()%> = ejs.render(TEMPLATES['<%=templateType%>.<%=templateExt%>.ejs'], {a: 'a', b: 'b'});\r\n        var templateFileName = 'generatedFiles/subDir/<%=templateType%>.<%=templateExt%>';\r\n        var artifact = self.blobClient.createArtifact('templateFiles');\r\n        artifact.addFile(templateFileName, template<%=templateExt.toUpperCase()%>, function (err) {\r\n            if (err) {\r\n                callback(err, self.result);\r\n                return;\r\n            }\r\n            self.blobClient.saveAllArtifacts(function (err, hashes) {\r\n                if (err) {\r\n                    callback(err, self.result);\r\n                    return;\r\n                }\r\n                // This will add a download hyperlink in the result-dialog.\r\n                self.result.addArtifact(hashes[0]);\r\n                // This will save the changes. If you don't want to save;\r\n                // exclude self.save and call callback directly from this scope.\r\n                self.result.setSuccess(true);\r\n                self.save('added obj', function (err) {\r\n                    callback(null, self.result);\r\n                });\r\n            });\r\n        });\r\n<%} else {%>\r\n        // This will save the changes. If you don't want to save;\r\n        // exclude self.save and call callback directly from this scope.\r\n        self.result.setSuccess(true);\r\n        self.save('added obj', function (err) {\r\n            callback(null, self.result);\r\n        });\r\n<%}%>\r\n    };\r\n\r\n    /**\r\n    * Checks if the given node is of the given meta-type.\r\n    * Usage: <tt>self.isMetaTypeOf(aNode, self.META['FCO']);</tt>\r\n    * @param node - Node to be checked for type.\r\n    * @param metaNode - Node object defining the meta type.\r\n    * @returns {boolean} - True if the given object was of the META type.\r\n    */\r\n    <%= pluginID %>.prototype.isMetaTypeOf = function (node, metaNode) {\r\n        var self = this,\r\n            metaGuid = self.core.getGuid(metaNode);\r\n        while (node) {\r\n            if (self.core.getGuid(node) === metaGuid) {\r\n                return true;\r\n            }\r\n            node = self.core.getBase(node);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n    * Finds and returns the node object defining the meta type for the given node.\r\n    * @param node - Node to be checked for type.\r\n    * @returns {Object} - Node object defining the meta type of node.\r\n    */\r\n    <%= pluginID %>.prototype.getMetaType = function (node) {\r\n        var self = this,\r\n            name;\r\n        while (node) {\r\n            name = self.core.getAttribute(node, 'name');\r\n            if (self.META.hasOwnProperty(name) && self.core.getPath(self.META[name]) === self.core.getPath(node)) {\r\n                break;\r\n            }\r\n            node = self.core.getBase(node);\r\n        }\r\n        return node;\r\n    };\r\n\r\n    return <%= pluginID %>;\r\n});",
    "unit_test.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>.\r\n*/\r\n\r\n'use strict';\r\nif (typeof window === 'undefined') {\r\n    // server-side setup\r\n    var requirejs = require('requirejs');\r\n    require('../../../../../test-conf.js');\r\n\r\n    var chai = require('chai'),\r\n        should = chai.should(),\r\n        assert = chai.assert,\r\n        expect = chai.expect;\r\n}\r\n\r\n// TODO: Update this with a more to-the-point regular expression\r\nvar semanticVersionPattern = /^\\d+\\.\\d+\\.\\d+$/;\r\n\r\ndescribe('<%= pluginID %>', function () {\r\n    var plugin;\r\n\r\n    before(function (done) {\r\n        requirejs(['plugin/<%= pluginID %>/<%= pluginID %>/<%= pluginID %>'], function (<%= pluginID %>) {\r\n            plugin = new <%= pluginID %>();\r\n            // TODO: Add option for generating createMETATypesTests and including core etc.\r\n            //core = new Core();\r\n            //meta = createMETATypesTests(core);\r\n            //rootNode = core.getRootNode();\r\n            //modelsNode = core.createNode({base: meta.ModelElement, parent: rootNode});\r\n            //core.setAttribute(modelsNode, 'name', 'Models');\r\n        done();\r\n        });\r\n    });\r\n\r\n    it('getVersion', function () {\r\n        expect(semanticVersionPattern.test(plugin.getVersion())).to.equal(true);\r\n    });\r\n\r\n    it('getDescription', function () {\r\n        var description = plugin.getDescription();\r\n        expect(typeof description === 'string' || description instanceof String).to.equal(true);\r\n    });\r\n\r\n    it('getName', function () {\r\n        var name = plugin.getName();\r\n        expect(typeof name === 'string' || name instanceof String).to.equal(true);\r\n    });\r\n\r\n    it('main should be implemented', function () {\r\n        var proto = Object.getPrototypeOf(plugin);\r\n        expect(proto.hasOwnProperty('main')).to.equal(true);\r\n    });\r\n\r\n});",
    "meta.js.ejs": "/**\r\n* Generated by MockModelGenerator from webgme on <%= date %>.\r\n*/\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n    return function (core) {\r\n        var meta = {};\r\n<%\r\nvar nodeData, i;\r\nfor (i = 0; i < metaNodes.length; i += 1) {\r\n    nodeData = metaNodes[i];\r\n    if (nodeData.base) {%>\r\n        meta.<%= nodeData.name %> = core.createNode({base: meta.<%= nodeData.base %>});\r\n<%} else {%>\r\n        meta.<%= nodeData.name %> = core.createNode({});\r\n<%}%>        core.setAttribute(meta.<%= nodeData.name%>, 'name', '<%= nodeData.name %>');\r\n<%}%>\r\n        return meta;\r\n    };\r\n});",
    "model.js.ejs": "/**\r\n* Generated by MockModelGenerator from webgme on <%= date %>.\r\n*/\r\n<%\r\nvar nodeData,\r\n    i, key, val, q;%>\r\ndefine(['mocks/CoreMock', './META'], function (CoreMock, createMeta) {\r\n    'use strict';\r\n    var core = new CoreMock(<%=timeOut%>),\r\n        META = createMeta(core),\r\n        options;\r\n\r\n    options = {\r\n        base: <%if (activeNode.baseIsMeta) {%>META.<%=activeNode.metaType%><%}else{%>null<%}%>,\r\n        parent: core._rootNode,\r\n        attr: {\r\n<%\r\n\r\nfor (key in activeNode.attr) {\r\n    if (activeNode.attr.hasOwnProperty(key)){\r\n        val = activeNode.attr[key];\r\n        q = typeof val === 'string';\r\n%>            '<%=key%>': <%if (q) {%>'<%=val%>'<%}else{%><%=val%><%}%>,\r\n<%}}%>        }\r\n    };\r\n    var <%=activeNode.ID%> = core.createNode(options);\r\n<%\r\nfor (i = 0; i < modelNodes.length; i += 1) {\r\n    nodeData = modelNodes[i];\r\n%>\r\n    options = {\r\n        base: <%if (nodeData.baseIsMeta) {%>META.<%=nodeData.metaType%><%}else{%>null<%}%>,\r\n        parent: <%=nodeData.parentID%>,\r\n        attr: {\r\n<%  for (key in nodeData.attr) {\r\n        if (nodeData.attr.hasOwnProperty(key)){\r\n            val = nodeData.attr[key];\r\n            q = typeof val === 'string';\r\n%>            '<%=key%>': <%if (q) {%>'<%=val%>'<%}else{%><%=val%><%}%>,\r\n<%}}%>        }\r\n    };\r\n    var <%=nodeData.ID%> = core.createNode(options);\r\n<%}%>\r\n\r\n// ---------------------- Bases for nodes with non-meta bases -------------------------\r\n<%\r\nfor (key in basePairs) {\r\n    if (basePairs.hasOwnProperty(key)) {\r\n%>    <%=key%>.pointers.base = core.getPath(<%=basePairs[key]%>);\r\n<%\r\n    }\r\n}%>\r\n// ---------------------- Pointers (e.g. connections) ---------------------------------\r\n    return {\r\n        core: core,\r\n        META: META,\r\n        activeNode: <%=activeNode.ID%>\r\n    };\r\n});",
    "constructorsDomain.js.ejs": "define(['plugin/<%- projectName %>/DSML/<%- projectName %>.def'], function (<%- projectName %>) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n    * This file defines all constructors of the <%- projectName %> domain specific API types.\r\n    *\r\n    * Generated on <%- new Date().toString() %> [<%- new Date().toISOString() %>]\r\n    * @exports <%- projectName %>\r\n    * @version 1.0\r\n    */\r\n\r\n<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n    var metaTypeName = metaTypes[metaTypeIndex].name;\r\n    var base = metaTypes[metaTypeIndex].base\r\n    var hasChildren = metaTypes[metaTypeIndex].children.length > 0%>\r\n/******************************************** <%- metaTypeName %> **********************************************/\r\n\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.\r\n    *\r\n    * @class\r\n    <% if (base) { %>* @augments {<%- projectName %>.<%- base %>}<% } %>\r\n    * @classdesc This class represents a(n) <%- metaTypeName %>.\r\n    * @property {<%- projectName %>.<%- metaTypeName %>.Attributes} attributes The attributes of the <%- metaTypeName %>.\r\n    * @property {<%- projectName %>.<%- metaTypeName %>.Registry} registry The registry of the <%- metaTypeName %>.\r\n    <%if (hasChildren) {%>* @property {<%- projectName %>.<%- metaTypeName %>.Children} childrenOfKind Holds the children of the <%- metaTypeName %>.<% } %>\r\n    * @param {object} nodeObj The wrapped WebGME object.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %> = function (nodeObj) {\r\n        this._nodeObj = nodeObj;\r\n        this.attributes = new <%- projectName %>.<%- metaTypeName %>.Attributes(this._nodeObj);\r\n        this.registry = new <%- projectName %>.<%- metaTypeName %>.Registry(this._nodeObj);\r\n        <%if (hasChildren) {%>this.childrenOfType = new <%- projectName %>.<%- metaTypeName %>.Children(this._nodeObj);<%}%>\r\n    };\r\n\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.Attributes\r\n    *\r\n    * @class\r\n    * @classdesc This class wraps the attributes of <%- metaTypeName %>.\r\n    * @param {object} nodeObj The wrapped WebGME object of <%- metaTypeName %>.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Attributes = function (nodeObj) {\r\n        this._nodeObj = nodeObj;\r\n    };\r\n\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.Registry\r\n    *\r\n    * @class\r\n    * @classdesc This class wraps the registry of <%- metaTypeName %>.\r\n    * @param {object} nodeObj The wrapped WebGME object of <%- metaTypeName %>.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Registry = function (nodeObj) {\r\n        this._nodeObj = nodeObj;\r\n    };\r\n<%if (hasChildren) {%>\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.Children\r\n    *\r\n    * @class\r\n    * @classdesc This class wraps the children of <%- metaTypeName %>.\r\n    * @param {object} nodeObj The wrapped WebGME object of <%- metaTypeName %>.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Children = function (nodeObj) {\r\n        this._nodeObj = nodeObj;\r\n    };\r\n<%}%>\r\n<%}%>\r\n    return <%- projectName %>;\r\n});",
    "defDomain.js.ejs": "define([], function () {\r\n\r\n    var <%- projectName %> = function () {};\r\n\r\n    <%- projectName %>.initialize = function (core, storage, META) {\r\n        var name;\r\n        for (name in META) {\r\n            if (META.hasOwnProperty(name)) {\r\n                if (<%- projectName %>.hasOwnProperty(name)) {\r\n                    <%- projectName %>[name].Type = META[name];\r\n                } else {\r\n                    <%- projectName %>[name] = {};\r\n                    <%- projectName %>[name].Type = META[name];\r\n                }\r\n            }\r\n        }\r\n\r\n        <%- projectName %>._core = core;\r\n        <%- projectName %>._storage = storage;\r\n    };\r\n\r\n\r\n    <%- projectName %>.createMETATypesTests = function (core) {\r\n        var META = {},\r\n        options = {},\r\n        node;\r\n\r\n        <% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n            var metaTypeName = metaTypes[metaTypeIndex].name;\r\n        %>\r\n        node = core.createNode(options);\r\n        core.setAttribute(node, 'name', '<%- metaTypeName %>');\r\n        META.<%- metaTypeName %> = node;\r\n        <%\r\n        }\r\n        %>\r\n\r\n        return META;\r\n    };\r\n\r\n    return CyPhyLight;\r\n});",
    "DOMAIN.js.ejs": "define([], function () {\r\n    'use strict';\r\n    /**\r\n    * A module representing <%- projectName %> domain specific API.\r\n    *\r\n    * Generated on <%- new Date().toString() %> [<%- new Date().toISOString() %>]\r\n    * @exports <%- projectName %>\r\n    * @version 1.0\r\n    */\r\n    var <%- projectName %> = function () {};\r\n\r\n    <%- projectName %>.initialize = function (core, storage, META) {\r\n        var name;\r\n        for (name in META) {\r\n            if (META.hasOwnProperty(name)) {\r\n                if (<%- projectName %>.hasOwnProperty(name)) {\r\n                    <%- projectName %>[name].Type = META[name];\r\n                } else {\r\n                    <%- projectName %>[name] = {};\r\n                    <%- projectName %>[name].Type = META[name];\r\n                }\r\n            }\r\n        }\r\n\r\n        <%- projectName %>._core = core;\r\n        <%- projectName %>._storage = storage;\r\n    };\r\n\r\n    <%- projectName %>.createMETATypesTests = function (core) {\r\n        var META = {},\r\n            options = {},\r\n            node;\r\n\r\n<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n    var metaTypeName = metaTypes[metaTypeIndex].name;\r\n%>\r\n        node = core.createNode(options);\r\n        core.setAttribute(node, 'name', '<%- metaTypeName %>');\r\n        META.<%- metaTypeName %> = node;\r\n<%\r\n}\r\n%>\r\n        return META;\r\n    };\r\n\r\n<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n    var metaTypeName = metaTypes[metaTypeIndex].name;\r\n    var ID = metaTypes[metaTypeIndex].ID;\r\n    var GUID = metaTypes[metaTypeIndex].GUID;\r\n    var Hash = metaTypes[metaTypeIndex].Hash;\r\n    var base = metaTypes[metaTypeIndex].base;\r\n    var attributeNames = metaTypes[metaTypeIndex].attributeNames;\r\n    var registryNames = metaTypes[metaTypeIndex].registryNames;\r\n\r\n\r\n    var isConnection = metaTypes[metaTypeIndex].isConnection;\r\n    var children = metaTypes[metaTypeIndex].children;\r\n%>\r\n    //<editor-fold desc=\"<%- metaTypeName %>\">\r\n\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.\r\n    *\r\n    * @class\r\n    <% if (base) { %>* @augments {<%- projectName %>.<%- base %>}<% } %>\r\n    * @classdesc This class represents a(n) <%- metaTypeName %>.\r\n    * @property {<%- projectName %>.<%- metaTypeName %>.Attributes} attributes The attributes of the <%- metaTypeName %>.\r\n    * @property {<%- projectName %>.<%- metaTypeName %>.Registry} registry The registry of the <%- metaTypeName %>.\r\n    * @param {object} nodeObj The wrapped WebGME object.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %> = function (nodeObj) {\r\n        <%\r\n        if (base) {\r\n        %>\r\n        // Call the constructor of the base-class as if it were acting on this.\r\n        // This call is probably only needed if we want to cache the attributes and registry\r\n        // while not defining them flat here.\r\n        //<%- projectName %>.<%- base %>.call(this, nodeObj);\r\n        //<%\r\n        }\r\n        %>\r\n        this._nodeObj = nodeObj;\r\n        this.attributes = new <%- projectName %>.<%- metaTypeName %>.Attributes(this._nodeObj);\r\n        this.registry = new <%- projectName %>.<%- metaTypeName %>.Registry(this._nodeObj);\r\n    };\r\n    <%\r\n    if (base) {\r\n    %>\r\n\r\n    // This will give inheritance when checking types, but META-types must be sorted based on the order of inheritance.\r\n    // If not <%- projectName %>.<%- base %>.prototype could be undefined at this point.\r\n    // <%- projectName %>.<%- metaTypeName %>.prototype = Object.create(<%- projectName %>.<%- base %>.prototype);\r\n    // <%- projectName %>.<%- metaTypeName %>.prototype.constructor = <%- projectName %>.<%- metaTypeName %>;\r\n    // <%\r\n    }\r\n    // %>\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> static fields, properties and functions\">\r\n\r\n    /**\r\n    * WebGME node object that represents <%- metaTypeName %> type.\r\n    * @type {nodeObj}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Type = null; // this is set by the <%- projectName %>.initialize function\r\n\r\n    /**\r\n    * WebGME node object's meta type ID of <%- metaTypeName %>.\r\n    * @type {string}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.ID = \"<%- ID %>\";\r\n\r\n    /**\r\n    * WebGME node object's meta type GUID of <%- metaTypeName %>.\r\n    * @type {string}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.GUID = \"<%- GUID %>\";\r\n\r\n    /**\r\n    * WebGME node object's meta type hash value of <%- metaTypeName %>.\r\n    * @type {string}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Hash = \"<%- Hash %>\";\r\n\r\n        <%\r\n        if (isConnection) {\r\n        %>\r\n    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent, src, dst) {\r\n        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});\r\n        <%- projectName %>._core.setPointer(nodeObj, 'src', src.getNodeObj());\r\n        <%- projectName %>._core.setPointer(nodeObj, 'dst', dst.getNodeObj());\r\n        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);\r\n    };\r\n\r\n        <%\r\n        } else {\r\n        %>\r\n    /**\r\n    * Creates a new <%- metaTypeName %> inside given parent.\r\n    * @returns {<%- projectName %>.<%- metaTypeName %>} The newly created <%- metaTypeName %>.\r\n    * @param {<%- projectName %>.FCO} parent Instance where the new <%- metaTypeName %> should be created.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent) {\r\n        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});\r\n        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);\r\n    };\r\n\r\n        <%\r\n        }\r\n        %>\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> create child objects\">\r\n<%\r\n    for (var j = 0; j < children.length; j += 1) {\r\n        //var childBad = metaTypesByID[children[j]];\r\n\r\n//        if (childBad.isConnection) {\r\n//            console.log('Connection', childBad.name, childBad.isConnection);\r\n//        }\r\n//\r\n//        if (childBad.isAbstract) {\r\n//            console.log('Abstract', childBad.name, childBad.isAbstract);\r\n//            console.log(childBad);\r\n//        }\r\n\r\n        // FIXME: we have to get the child in a different way\r\n\r\n        var child = null;\r\n        for (var k = 0; k < metaTypes.length; k += 1) {\r\n            if (metaTypes[k].ID === children[j]) {\r\n                child = metaTypes[k];\r\n                if (child.isAbstract) {\r\n                   // console.log(child);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n%><%\r\n        if (child.isConnection) {\r\n    // FIXME: this is still buggy\r\n%>\r\n        /**\r\n        * Creates a new <%- child.name %> inside this <%- metaTypeName %> instance with src and dst connected.\r\n        * @param {<%- projectName %>.FCO} src The source of the new connection.\r\n        * @param {<%- projectName %>.FCO} dst The destination of the new connection.\r\n        * @returns {<%- projectName %>.<%- child.name %>} The newly created <%- child.name %>.\r\n        * @public\r\n        */\r\n        <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function (src, dst) {\r\n            return <%- projectName %>.<%- child.name %>.createObj(this, src, dst);\r\n        };\r\n<%\r\n        } else {\r\n%>\r\n    /**\r\n    * Creates a new <%- child.name %> inside this <%- metaTypeName %> instance.\r\n    * @returns {<%- projectName %>.<%- child.name %>} The newly created <%- child.name %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function () {\r\n        return <%- projectName %>.<%- child.name %>.createObj(this);\r\n    };\r\n<%\r\n        }\r\n        %>\r\n<%\r\n    }\r\n%>\r\n    //</editor-fold>\r\n\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.getNodeObj = function () { return this._nodeObj; };\r\n\r\n    // TODO: get Id\r\n    // TODO: get Guid\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> attributes\">\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.Attributes\r\n    *\r\n    * @class\r\n    * @classdesc This class wraps the attributes of <%- metaTypeName %>.\r\n    * @param {object} nodeObj The wrapped WebGME object of <%- metaTypeName %>.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Attributes = function (nodeObj) {\r\n        this._nodeObj = nodeObj;\r\n    };\r\n\r\n<%\r\n    for (var i = 0; i < attributeNames.length; i += 1) {\r\n       var attributeName = attributeNames[i];\r\n%>\r\n    /**\r\n    * Gets the attribute <%- attributeName %> of the <%- metaTypeName %> instance.\r\n    * @returns {string|object} Currently set <%- attributeName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Attributes.prototype.get<%- attributeName %> = function () {\r\n        return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');\r\n    };\r\n\r\n    /**\r\n    * Sets the attribute <%- attributeName %> of the <%- metaTypeName %> instance.\r\n    * @param {string|object} value New <%- attributeName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Attributes.prototype.set<%- attributeName %> = function (value) {\r\n        return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);\r\n    };\r\n\r\n\r\n<%\r\n    }\r\n%>\r\n\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> registry entries\">\r\n    /**\r\n    * Initializes a new instance of <%- metaTypeName %>.Registry\r\n    *\r\n    * @class\r\n    * @classdesc This class wraps the registry of <%- metaTypeName %>.\r\n    * @param {object} nodeObj The wrapped WebGME object of <%- metaTypeName %>.\r\n    * @constructor\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Registry = function (nodeObj) {\r\n        this._nodeObj = nodeObj;\r\n    };\r\n<%\r\n    for (var i = 0; i < registryNames.length; i += 1) {\r\n        var registryName = registryNames[i];\r\n%>\r\n    /**\r\n    * Gets the registry value <%- registryName %> of the <%- metaTypeName %> instance.\r\n    * @returns {string|object} Currently set <%- registryName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Registry.prototype.get<%- registryName %> = function () {\r\n        return <%- projectName %>._core.getRegistry(this._nodeObj, '<%- registryName %>');\r\n    };\r\n\r\n    /**\r\n    * Sets the registry value <%- registryName %> of the <%- metaTypeName %> instance.\r\n    * @param {string|object} value New registry value of <%- registryName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Registry.prototype.set<%- registryName %> = function (value) {\r\n        return <%- projectName %>._core.setRegistry(this._nodeObj, '<%- registryName %>', value);\r\n    };\r\n\r\n<%\r\n    }\r\n%>\r\n\r\n    //</editor-fold>\r\n\r\n    // TODO: DSML connections\r\n    // TODO: DSML references\r\n    // TODO: DSML sets\r\n    // TODO: DSML pointers\r\n\r\n    //</editor-fold>\r\n\r\n<%\r\n}\r\n%>\r\n\r\n    return <%- projectName %>;\r\n\r\n});",
    "mainDOMAIN.js.ejs": "define(['plugin/<%- projectName %>/DSML/<%- projectName %>.def',\r\n<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n    var metaTypeName = metaTypes[metaTypeIndex].name;\r\n    var endSign = (metaTypeIndex === metaTypes.length - 1) ? ']' : ',';\r\n%>        'plugin/<%- projectName %>/DSML/<%- projectName%>.<%- metaTypeName%>.Dsml'<%- endSign %>\r\n<%\r\n}\r\n%>    ,function (<%- projectName %>,\r\n<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n    var metaTypeName = metaTypes[metaTypeIndex].name;\r\n    var endSign = (metaTypeIndex === metaTypes.length - 1) ? ') {' : ',';\r\n%>        <%- metaTypeName %><%- endSign %>\r\n<%}%>\r\n\r\n    'use strict';\r\n\r\n<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {\r\n    var metaTypeName = metaTypes[metaTypeIndex].name;%>\r\n    <%- projectName %>.<%- metaTypeName %> = <%- metaTypeName %>;\r\n<%\r\n}\r\n%>\r\n\r\n    return <%- projectName %>;\r\n\r\n});",
    "typeDOMAIN.js.ejs": "define (['plugin/<%- projectName %>/DSML/<%- projectName %>.constructors'<%if(base){ %>, 'plugin/<%- projectName %>/DSML/<%- projectName %>.<%-base%>.Dsml'<%}%>], function (<%- projectName %><%if(base){ %>, <%-base%><%}%>) {\r\n    'use strict';\r\n\r\n    <%\r\n    if (base) {\r\n    %>\r\n    // This will give inheritance when checking types\r\n    <%- projectName %>.<%- metaTypeName %>.prototype = Object.create(<%- base %>.prototype);\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.constructor = <%- projectName %>.<%- metaTypeName %>;\r\n<%  }%>\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> static fields, properties and functions\">\r\n\r\n    /**\r\n    * WebGME node object that represents <%- metaTypeName %> type.\r\n    * @type {Object}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Type = null; // this is set by the <%- projectName %>.initialize function\r\n\r\n    /**\r\n    * WebGME node object's meta type ID of <%- metaTypeName %>.\r\n    * @type {string}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.ID = \"<%- ID %>\";\r\n\r\n    /**\r\n    * WebGME node object's meta type GUID of <%- metaTypeName %>.\r\n    * @type {string}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.GUID = \"<%- GUID %>\";\r\n\r\n    /**\r\n    * WebGME node object's meta type hash value of <%- metaTypeName %>.\r\n    * @type {string}\r\n    * @static\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Hash = \"<%- Hash %>\";\r\n    <%\r\n    if (isConnection) {\r\n    %>\r\n    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent, src, dst) {\r\n        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});\r\n        <%- projectName %>._core.setPointer(nodeObj, 'src', src.getNodeObj());\r\n        <%- projectName %>._core.setPointer(nodeObj, 'dst', dst.getNodeObj());\r\n        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);\r\n    };\r\n    <%\r\n    } else {\r\n    %>\r\n    /**\r\n    * Creates a new <%- metaTypeName %> inside given parent.\r\n    * @returns {<%- projectName %>.<%- metaTypeName %>} The newly created <%- metaTypeName %>.\r\n    * @param {<%- projectName %>.FCO} parent Instance where the new <%- metaTypeName %> should be created.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent) {\r\n        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});\r\n        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);\r\n    };\r\n    <%\r\n    }\r\n    %>\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> instance properties and functions\">\r\n    /**\r\n    * Gets the ID of the <%- metaTypeName %> instance.\r\n    * @returns {string} The ID.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.getID = function () {\r\n        return <%- projectName %>._core.getID(this._nodeObj);\r\n    };\r\n\r\n    /**\r\n    * Gets the GUID of the <%- metaTypeName %> instance.\r\n    * @returns {string} The GUID.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.getGUID = function () {\r\n        return <%- projectName %>._core.getGuid(this._nodeObj);\r\n    };\r\n\r\n    /**\r\n    * Gets the core object of the <%- metaTypeName %> instance.\r\n    * @returns {Object} The core nodeObject.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.getNodeObj = function () {\r\n        return this._nodeObj;\r\n    };\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> Child objects\">\r\n    <%\r\nfor (var j = 0; j < children.length; j += 1) {\r\n    var child = idMap[children[j]];\r\n    %>\r\n    <% if (child.isAbstract) {\r\n        continue;\r\n    }%>\r\n    // TODO: Handle inheritance and abstract types.\r\n    /**\r\n    * Calls callback with an array of all children of type <%-child.name%> in the Component.\r\n    * @param {<%- projectName %>.<%- metaTypeName %>.Children.<%-child.name%>~callback} callback The callback that handles the response.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Children.prototype.<%-child.name%> = function (callback) {\r\n        <%- projectName %>._core.loadChildren(this._nodeObj, function (err, childNodes) {\r\n            var i, nodeObj, orgChild,\r\n            dsmlChildren = [];\r\n            for (i = 0; i < childNodes.length; i += 1) {\r\n                orgChild = childNodes[i];\r\n                nodeObj = <%- projectName %>._core.getBase(orgChild);\r\n                while (nodeObj) {\r\n                    if (<%- projectName %>._core.getGuid(nodeObj) === <%- projectName %>.<%-child.name%>.GUID) {\r\n                        dsmlChildren.push(new <%- projectName %>.<%-child.name%>(orgChild));\r\n                        break;\r\n                    }\r\n                    nodeObj = <%- projectName %>._core.getBase(nodeObj);\r\n                }\r\n            }\r\n\r\n            callback(dsmlChildren);\r\n        });\r\n    };\r\n\r\n    /**\r\n    * This callback is displayed as part of the <%- projectName %>.<%- metaTypeName %>.Children.<%child.name%> class.\r\n    * @callback <%- metaTypeName %>.Children.<%child.name%>~callback\r\n    * @param {Array.<<%- projectName %>.<%- child.name %>>} dsmlChildren Gets populated with children of type <%child.name%>.\r\n    */\r\n\r\n    <%\r\n    if (child.isConnection) {\r\n        // FIXME: this is still buggy\r\n    %>\r\n    /**\r\n    * Creates a new <%- projectName %>.<%- child.name %> inside this <%- metaTypeName %> instance with src and dst connected.\r\n    * @param {<%- projectName %>.FCO} src The source of the new connection.\r\n    * @param {<%- projectName %>.FCO} dst The destination of the new connection.\r\n    * @returns {<%- projectName %>.<%- child.name %>} The newly created <%- child.name %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function (src, dst) {\r\n        return <%- projectName %>.<%- child.name %>.createObj(this, src, dst);\r\n    };\r\n    <%\r\n    } else {\r\n    %>\r\n    /**\r\n    * Creates a new <%- projectName %>.<%- child.name %> inside this <%- metaTypeName %> instance.\r\n    * @returns {<%- projectName %>.<%- child.name %>} The newly created <%- child.name %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function () {\r\n        return <%- projectName %>.<%- child.name %>.createObj(this);\r\n    };\r\n    <% } %>\r\n<%} %>\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> Attributes\">\r\n\r\n    <%\r\n    for (var i = 0; i < attributeNames.length; i += 1) {\r\n        var attributeName = attributeNames[i];\r\n    %>\r\n    /**\r\n    * Gets the attribute <%- attributeName %> of the <%- metaTypeName %> instance.\r\n    * @returns {string|object} Currently set <%- attributeName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Attributes.prototype.get<%- attributeName %> = function () {\r\n        return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');\r\n    };\r\n\r\n    /**\r\n    * Sets the attribute <%- attributeName %> of the <%- metaTypeName %> instance.\r\n    * @param {string|object} value New <%- attributeName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Attributes.prototype.set<%- attributeName %> = function (value) {\r\n        return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);\r\n    };\r\n\r\n    <%\r\n    }\r\n    %>\r\n\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"<%- metaTypeName %> registry entries\">\r\n\r\n    <%\r\n    for (var i = 0; i < registryNames.length; i += 1) {\r\n        var registryName = registryNames[i];\r\n    %>\r\n    /**\r\n    * Gets the registry value <%- registryName %> of the <%- metaTypeName %> instance.\r\n    * @returns {string|object} Currently set <%- registryName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Registry.prototype.get<%- registryName %> = function () {\r\n        return <%- projectName %>._core.getRegistry(this._nodeObj, '<%- registryName %>');\r\n    };\r\n\r\n    /**\r\n    * Sets the registry value <%- registryName %> of the <%- metaTypeName %> instance.\r\n    * @param {string|object} value New registry value of <%- registryName %>.\r\n    * @public\r\n    */\r\n    <%- projectName %>.<%- metaTypeName %>.Registry.prototype.set<%- registryName %> = function (value) {\r\n        return <%- projectName %>._core.setRegistry(this._nodeObj, '<%- registryName %>', value);\r\n    };\r\n\r\n    <%\r\n    }\r\n    %>\r\n\r\n    //</editor-fold>\r\n\r\n    // TODO: DSML connections\r\n    // TODO: DSML references\r\n    // TODO: DSML sets\r\n    // TODO: DSML pointers\r\n\r\n    return <%- projectName %>.<%- metaTypeName %>;\r\n});",
    "fmi_wrapper.py.ejs": "#\r\n# AUTO-GENERATED <%=dateTime%> by FmiExporterPlugin (WebGME)\r\n#\r\n\r\n__author__ = 'James'\r\n\r\nfrom pymodelica import compile_fmu   # JModelica.org's 'pymodelica'\r\nfrom pyfmi import load_fmu\r\n\r\nimport logging\r\n\r\nlog = logging.getLogger()\r\n\r\nclass FMI_ME(object):\r\n\r\ndef __init__(self, model_exchange_config):\r\n\r\nfmu_list = model_exchange_config['FMUs']\r\nconn_list = model_exchange_config['Connections']\r\nsim_info = model_exchange_config['SimulationInfo']\r\nself.sim_start_time = sim_info['StartTime']\r\nself.sim_stop_time = sim_info['StopTime']\r\nself.step_size = sim_info['StepSize']\r\nself.priority_map = dict()\r\nself.connections = list()\r\n\r\nself.populate_priority_map(fmu_list)\r\n\r\nself.populate_conn_list(conn_list)\r\n\r\n\r\ndef populate_priority_map(self, fmu_list):\r\n\r\n# Load and initialize the FMUs (parameters and simulation info)\r\nfor fmu_instance_info in fmu_list:\r\nfmu = FMU(fmu_instance_info, self.sim_start_time)\r\npriority = fmu.priority\r\nif priority not in self.priority_map:\r\nself.priority_map.update({priority: dict()})\r\n\r\nself.priority_map[priority].update({fmu.name: fmu})\r\n\r\ndef populate_conn_list(self, conn_list):\r\n\r\nfor conn_info in conn_list:\r\n\r\nconn = CONN(conn_info)\r\nself.connections.append(conn)\r\n\r\n\r\nclass CONN(object):\r\n\r\ndef __init__(self, connection_info):\r\n\r\nsource = connection_info['Source'].split('.')\r\ndestination = connection_info['Destination'].split('.')\r\n\r\nself.src_fmu = source[0]\r\nself.src_port = source[-1]\r\nself.src_value_ref = None\r\nself.src_priority = connection_info['SrcPriority']\r\nself.dst_fmu = destination[0]\r\nself.dst_port = destination[-1]\r\nself.dst_value_ref = None\r\nself.dst_priority = connection_info['DstPriority']\r\n\r\nclass FMU(object):\r\n\r\ndef __init__(self, fmu_info, sim_start_time):\r\n\r\nself.name = fmu_info['Name']\r\nself.priority = fmu_info['Priority']\r\n\r\nfmu_file_path = fmu_info['File']\r\nself.pyfmi_fmu = load_fmu(fmu_file_path)\r\nself.set_instance_parameters(fmu_info['Parameters'])\r\nself.pyfmi_fmu.time = sim_start_time\r\nself.pyfmi_fmu.initialize()\r\nself.state_value_refs = self.pyfmi_fmu.get_state_value_references()\r\nself.time_varying_refs = self.pyfmi_fmu.get_model_time_varying_value_references()[0]\r\n# self.input_value_refs = self.get_value_refs(fmu_info['Inputs'])\r\n# self.output_value_refs = self.get_value_refs(fmu_info['Outputs'])\r\nself.input_names = fmu_info['Inputs']\r\nself.output_names = fmu_info['Outputs']\r\n\r\ndef get_value_refs(self, variable_name_list):\r\n\r\nvalue_refs = list()\r\n\r\nfor var_name in variable_name_list:\r\nv_ref = self.pyfmi_fmu.get_variable_valueref(var_name)\r\nvalue_refs.append(v_ref)\r\n\r\nreturn value_refs\r\n\r\ndef set_instance_parameters(self, parameter_map):\r\n\r\nnames = list()\r\nvalues = list()\r\n\r\nfor p_name, p_value in parameter_map.iteritems():\r\n\r\n# if '*' in p_value:\r\n#     continue\r\n#     multiply = p_value.split('*')\r\n\r\nnames.append(p_name)\r\nvalues.append(p_value)\r\n\r\n#value_type = self.pyfmi_fmu.get_variable_data_type(p_name)\r\n# this returns an integer, where:\r\n# 0: Real\r\n# 1: Integer\r\n# 2: Boolean\r\n# 3: ?\r\n# 4: Enumeration\r\n\r\n#fmu_val_ref = self.pyfmi_fmu.get_variable_valueref(p_name)\r\n\r\n#if value_type in [str, unicode]:\r\n# if value_type in [str, unicode] and '*' not in p_value:  # hack to ignore formulas\r\n#     log.info('{0}-{1} is a being treated as a string ({2})'.format(p_name, p_value, value_type))\r\n#     self.pyfmi_fmu.set_string(fmu_val_ref, str(p_value))\r\n# elif value_type is int:\r\n#     log.info('{0}-{1} is a being treated as an integer ({2})'.format(p_name, p_value, value_type))\r\n#     self.pyfmi_fmu.set_integer(fmu_val_ref, int(p_value))\r\n# elif value_type is float:\r\n#     log.info('{0}-{1} is a being treated as a float ({2})'.format(p_name, p_value, value_type))\r\n#     self.pyfmi_fmu.set_real(fmu_val_ref, float(p_value))\r\n# elif value_type is bool:\r\n#     log.info('{0}-{1} is a being treated as a bool ({2})'.format(p_name, p_value, value_type))\r\n#     self.pyfmi_fmu.set_boolean(fmu_val_ref, bool(p_value))\r\n\r\nself.pyfmi_fmu.set(names, values)\r\n\r\n# def get_continuous_states(self):\r\n#\r\n#     self.states = self.pyfmi_fmu.continuous_states     # update 'this' fmu's states\r\n#     return  self.states                          # expose them to the caller\r\n#\r\n# def get_state_derivatives(self):\r\n#\r\n#     self.derivatives = self.pyfmi_fmu.get_derivatives()     # update 'this' fmu's derivatives\r\n#     return self.derivatives                           # expose them to the caller\r\n#\r\n# def get_nominal_state_values(self):\r\n#\r\n#     self.nominal_state_values = self.pyfmi_fmu.nominal_continuous_states     # update 'this' fmu's derivatives\r\n#     return self.nominal_state_values\r\n",
    "jmodelica_model_exchange.py.ejs": "#\r\n# AUTO-GENERATED <%=dateTime%> by FmiExporterPlugin (WebGME)\r\n#\r\n\r\n__author__ = 'James'\r\n\r\nimport os\r\nimport sys\r\nimport json\r\nimport logging\r\nimport pylab as P\r\nimport numpy as N\r\n\r\nfrom fmi_wrapper import FMI_ME, FMU\r\n\r\ntry:\r\nfrom pymodelica import compile_fmu   # JModelica.org's 'pymodelica'\r\nfrom pyfmi import load_fmu\r\nexcept:\r\nimport_error_msg = \"JModelica 'pymodelica' or 'pyfmi' module was not \" \\\r\n\"found. Make sure you have set all the environment \" \\\r\n\"variables from C:\\JModelica.org-1.12\\setenv.bat\"\r\nprint import_error_msg\r\n\r\n# Set up the Option parser\r\nfrom optparse import OptionParser\r\n\r\nparser = OptionParser()\r\nparser.add_option(\"-c\",\r\n\"--config\",\r\ndest=\"model_exchange_config_file\",\r\nhelp=\"Path to the model exchange configuration file.\")\r\n\r\n# Set up logger to write to 'filename'\r\nlogging.basicConfig(filename= \"jmodelica_model_exchange_py.log\",\r\nlevel=logging.DEBUG,\r\nformat=\"%(asctime)s %(levelname)s: %(message)s\",\r\ndatefmt=\"%Y-%m-%d %H:%M:%S\")\r\n\r\n\r\ndef read_model_exchange_config(model_exchange_config_file):\r\n\r\nwith open(model_exchange_config_file, 'r') as f_in:\r\nconfig_dict = json.load(f_in)\r\n\r\nreturn config_dict\r\n\r\ndef run_explicit_euler(fmi_me_object):\r\n\r\n# All FMUs have been loaded and initialized\r\n\r\nsim_start_time = fmi_me_object.sim_start_time\r\nsim_end_time = fmi_me_object.sim_stop_time\r\nintegration_step_size = fmi_me_object.step_size\r\n\r\n# Create the time-series & results variables and set the initial values\r\n# Also, initialize the terminate simulation var\r\n#time_for_result = np.array([sim_start_time])\r\ntime_for_result = [sim_start_time]\r\n\r\nresults_data = dict()\r\nterminate_simulation = list()\r\n\r\n# initialize result arrays for all state vars\r\nfor priority_level, fmu_map in fmi_me_object.priority_map.iteritems():\r\nfor fmu_name, fmu in fmu_map.iteritems():\r\nfmu_result = fmu.pyfmi_fmu.get_real(fmu.time_varying_refs)\r\nresults_data.update({fmu.name: [fmu_result]})\r\nterminate_simulation.append(fmu.pyfmi_fmu.get_event_info().terminateSimulation)\r\n\r\ni = 0\r\n#index_for_result = np.array([i])\r\nindex_for_result = [i]\r\ntime_at_step_i = sim_start_time  # initialize the 'time' variable\r\nt_next = sim_end_time\r\n\r\nwhile time_at_step_i < sim_end_time and not True in terminate_simulation:\r\n\r\n# Get the time_increment size\r\nt_increment = min(integration_step_size, t_next-time_at_step_i)\r\n\r\n# Increment the index and the time\r\ni += 1\r\ntime_at_step_i = time_at_step_i + t_increment\r\n\r\nfor priority_level, fmu_map in fmi_me_object.priority_map.iteritems():\r\n\r\nthis_priority = priority_level\r\n\r\n# Solve all 'this_priority' fmus for this time step\r\nfor fmu_name, fmu in fmu_map.iteritems():\r\n\r\n# Get existing event indicators\r\nevent_indicators = fmu.pyfmi_fmu.get_event_indicators()\r\n\r\n# Get existing states and compute derivatives of the FMU\r\nx_bar = fmu.pyfmi_fmu.continuous_states\r\nx_dot = fmu.pyfmi_fmu.get_derivatives()\r\n\r\n# Set time of the FMU\r\nfmu.pyfmi_fmu.time = time_at_step_i\r\n\r\n# Compute new states and set them\r\nx_bar = x_bar + t_increment*x_dot\r\nfmu.pyfmi_fmu.continuous_states = x_bar\r\n\r\n##########################\r\n# Get new event indicators\r\nevent_indicators_new = fmu.pyfmi_fmu.get_event_indicators()\r\n\r\n# Inform FMUs of the step and check for a step event (returns True/False)\r\nstep_event = fmu.pyfmi_fmu.completed_integrator_step()\r\n\r\n# Check for time and state events  # time events are 'predictable', state events are not necessarily so.\r\ntime_event  = abs(time_at_step_i-t_next) <= 1.e-10  # this one checks for the end (?)\r\nstate_event = True if True in ((event_indicators_new>0.0) != (event_indicators>0.0)) else False\r\n\r\n# Handle any events\r\nif step_event or time_event or state_event:\r\n\r\nevent_info = fmu.pyfmi_fmu.get_event_info()\r\nevent_info.iterationConverged = False\r\n\r\n# Event iteration\r\nwhile event_info.iterationConverged == False:\r\nfmu.pyfmi_fmu.event_update(intermediateResult=True) #Stops after each event iteration\r\nevent_info = fmu.pyfmi_fmu.get_event_info()\r\n\r\n#Retrieve solutions (if needed)\r\nif event_info.iterationConverged == False:\r\n#bouncing_fmu.get_real, get_integer, get_boolean,\r\n# get_string(valueref)\r\npass\r\n\r\n# Check if the event affected the state values and if so sets them\r\nif event_info.stateValuesChanged:\r\nx_bar = fmu.pyfmi_fmu.continuous_states\r\n\r\n# Get new nominal values.\r\nif event_info.stateValueReferencesChanged:\r\natol = 0.01*rtol*fmu.pyfmi_fmu.nominal_continuous_states\r\n\r\n# Check for new time event\r\nif event_info.upcomingTimeEvent:\r\nt_next = min(event_info.nextEventTime, sim_end_time)\r\nelse:\r\nt_next = sim_end_time\r\n\r\n##########################\r\n\r\nfmu_result = fmu.pyfmi_fmu.get_real(fmu.time_varying_refs)\r\nresult_array = results_data[fmu_name]\r\nresult_array.append(fmu_result)\r\n# results_data.update({fmu.name: result_array})\r\n\r\n# Propogate values for 'this_priority'\r\nfor conn in fmi_me_object.connections:\r\nif conn.src_priority == this_priority:\r\nsrc_fmu = fmu_map[conn.src_fmu]\r\nconn.src_value_ref = src_fmu.pyfmi_fmu.get_variable_valueref(conn.src_port)\r\nvalue = src_fmu.pyfmi_fmu.get_real(conn.src_value_ref)\r\ndst_fmu = fmi_me_object.priority_map[conn.dst_priority][conn.dst_fmu]\r\nconn.dst_value_ref = dst_fmu.pyfmi_fmu.get_variable_valueref(conn.dst_port)\r\ndst_fmu.pyfmi_fmu.set_real(conn.dst_value_ref, value)\r\n\r\ntime_for_result.append(time_at_step_i)\r\n\r\n\r\n#  PLOTTING\r\nplot_index = 1\r\n\r\nfor priority_level, fmu_map in fmi_me_object.priority_map.iteritems():\r\nfor fmu_name, fmu in fmu_map.iteritems():\r\nP.figure(plot_index)\r\nP.title(fmu_name)\r\nP.xlabel('Time (s)')\r\nfor input_name in fmu.input_names:\r\ninput_valueref = fmu.pyfmi_fmu.get_variable_valueref(input_name)\r\nvar_to_plot_index = fmu.time_varying_refs.index(input_valueref)\r\nP.plot(time_for_result, N.array(results_data[fmu_name])[:,var_to_plot_index], 'b', label=input_name)  # Inputs in blue\r\nfor output_name in fmu.output_names:\r\noutput_valueref = fmu.pyfmi_fmu.get_variable_valueref(output_name)\r\nvar_to_plot_index = fmu.time_varying_refs.index(output_valueref)\r\nP.plot(time_for_result, N.array(results_data[fmu_name])[:,var_to_plot_index], 'r', label=output_name)  # Outputs in red\r\n\r\nP.legend(loc=7)\r\nplot_index += 1\r\n\r\nP.show()\r\n\r\n\r\ndef main():\r\n\r\n(options, args) = parser.parse_args()\r\n\r\nconfig_file = r'.\\\\model_exchange_config.json'\r\n\r\nif options.model_exchange_config_file:\r\nconfig_file = options.model_exchange_config_file\r\n\r\nme_config = read_model_exchange_config(config_file)\r\n\r\nfmi_object = FMI_ME(me_config)\r\n\r\nrun_explicit_euler(fmi_object)\r\n\r\n\r\nif __name__ == '__main__':\r\nlog = logging.getLogger()\r\nroot_dir = os.getcwd()\r\n\r\ntry:\r\nmain()\r\nexcept:\r\nimport traceback\r\ntrace = traceback.format_exc()\r\n\r\nfailed_file = os.path.join(root_dir,\r\n'jmodelica_model_exchange_FAILED.txt')\r\n\r\nwith open(failed_file, 'wb') as f_out:\r\nf_out.write(trace)\r\nlog.error('See {0} for details.'.format(failed_file))\r\nsys.exit(2)\r\n",
    "Python.py.ejs": "print \"<%=a%> and <%=b%> provided.\"",
    "sample.html.ejs": "<html>\r\n\r\n<body>\r\n<div>name = <%= name %></div>\r\n</body>\r\n</html>",
    "sample.py.ejs": "name = <%= name %>",
    "backslash.ejs": "\\foo",
    "comments.ejs": "<li><a href=\"foo\"><% // double-slash comment %>foo</li>\n<li><a href=\"bar\"><% /* C-style comment */ %>bar</li>\n<li><a href=\"baz\"><% // double-slash comment with newline\n    %>baz</li>\n<li><a href=\"qux\"><% var x = 'qux'; // double-slash comment @ end of line %><%= x %></li>",
    "double-quote.ejs": "<p><%= \"lo\" + 'ki' %>'s \"wheelchair\"</p>",
    "error.ejs": "<ul>\n  <% if (users) { %>\n    <p>Has users</p>\n  <% } %>\n</ul>",
    "fail.ejs": "<% function foo() return 'foo'; %>",
    "include.css.ejs": "<style><% var value = 'bar' %><% include style.css %></style>",
    "include.ejs": "<ul>\n  [[ pets.forEach(function(pet){ ]]\n    [[ include pet ]]\n  [[ }) ]]\n</ul>",
    "menu.ejs": "<% var url = '/foo' -%>\n<% var title = 'Foo' -%>\n<% include includes/menu-item -%>\n\n<% var url = '/bar' -%>\n<% var title = 'Bar' -%>\n<% include includes/menu-item -%>\n\n<% var url = '/baz' -%>\n<% var title = 'Baz' -%>\n<% include includes/menu-item -%>",
    "messed.ejs": "<ul><%users.forEach(function(user){%><li><%=user.name%></li><%})%></ul>",
    "newlines.ejs": "<ul>\n  <% users.forEach(function(user){ %>\n    <li><%= user.name %></li>\n  <% }) %>\n</ul>",
    "no.newlines.ejs": "<ul>\n  <% users.forEach(function(user){ -%>\n  <li><%= user.name %></li>\n  <% }) -%>\n</ul>",
    "para.ejs": "<p>hey</p>",
    "pet.ejs": "<li>[[= pet.name ]]</li>",
    "single-quote.ejs": "<p><%= 'loki' %>'s wheelchair</p>",
    "user.ejs": "<h1>{= name}</h1>",
    "menu-item.ejs": "<li><% include menu/item %></li>",
    "item.ejs": "<a href=\"/<%= url %>\"><%= title %></a>",
    "functions.ejs": "<h1>Users</h1>\n\n<% function user(user) { %>\n  <li><strong><%= user.name %></strong> is a <%= user.age %> year old <%= user.species %>.</li>\n<% } %>\n\n<ul>\n  <% users.map(user) %>\n</ul>",
    "list.ejs": "<% if (names.length) { %>\n  <ul>\n    <% names.forEach(function(name){ %>\n      <li foo='<%= name + \"'\" %>'><%= name %></li>\n    <% }) %>\n  </ul>\n<% } %>"
}});