/**
* Generated by PluginGenerator from webgme on Tue Jun 10 2014 17:42:32 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig',
        'plugin/PluginBase',
        'plugin/C2MF/C2MF/meta'], function (PluginConfig, PluginBase, MetaTypes) {
    'use strict';

    /**
    * Initializes a new instance of C2MF.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin C2MF.
    * @constructor
    */
    var C2MF = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    C2MF.prototype = Object.create(PluginBase.prototype);
    C2MF.prototype.constructor = C2MF;

    /**
    * Gets the name of the C2MF.
    * @returns {string} The name of the plugin.
    * @public
    */
    C2MF.prototype.getName = function () {
        return "Component2MatlabFile";
    };

    /**
    * Gets the semantic version (semver.org) of the C2MF.
    * @returns {string} The version of the plugin.
    * @public
    */
    C2MF.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Gets the description of the C2MF.
    * @returns {string} The description of the plugin.
    * @public
    */
    C2MF.prototype.getDescription = function () {
        return "Generate a Matlab m-file from a Component";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    C2MF.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            mFileString,
            mFileName,
            getComponentInfoCallback,
            artifact,
            filesToAdd = {},
            addFilesCallback;

        self.updateMETA(self.metaTypes);

        getComponentInfoCallback = function (err, componentInfo) {
            if (err) {
                self.result.setSuccess(false);
                return callback(err, self.result);
            }

            mFileString = self.buildMatlabScript(componentInfo);
            mFileName = componentInfo.name + '.m';

            filesToAdd[mFileName] = mFileString;

            artifact = self.blobClient.createArtifact(componentInfo.name);

            addFilesCallback = function (err, fileHashes) {
                if (err) {
                    self.result.setSuccess(false);
                    return callback(err, self.result);
                }

                var artifactSaveCallback = function (err, artifactHash) {
                    if (err) {
                        self.result.setSuccess(false);
                        return callback(err, self.result);
                    }

                    self.result.setSuccess(true);
                    self.result.addArtifact(artifactHash);
                    callback(null, self.result);
                };

                artifact.save(artifactSaveCallback);
            }

            artifact.addFiles(filesToAdd, addFilesCallback);
        };

        self.getComponentInfo(self.activeNode, getComponentInfoCallback);
    };

    C2MF.prototype.buildMatlabScript = function (componentInfo) {
        var self = this,
            mFileString = '',
            itemNumber,
            element,
            key,
            value,
            bond;

        for (itemNumber in componentInfo.elements) {
            element = componentInfo.elements[itemNumber];
            for (key in element) {
                value = element[key];

                if (typeof value === 'number') {
                    mFileString += 'element(' + itemNumber + ').' + key + ' = ' + value + ';';
                } else {
                    mFileString += 'element(' + itemNumber + ').' + key + ' = \'' + value + '\';';
                }

                mFileString += '\n';
            }

            mFileString += '\n';
        }

        for (itemNumber in componentInfo.bonds) {
            bond = componentInfo.bonds[itemNumber];

            mFileString += 'bond(' + itemNumber + ').src = \'' + bond.src + '\';';
            mFileString += '\n';
            mFileString += 'bond(' + itemNumber + ').dst = \'' + bond.dst + '\';';

            mFileString += '\n\n';
        }

        return mFileString;
    };

    C2MF.prototype.getComponentInfo = function (componentNode, callback) {
        var self = this,
            childNode,
            metaNode,
            metaName,
            loadChildrenCallbackFunction,
            element,
            bond,
            elementCount = 0,
            bondCount = 0,
            componentInfo = {
                name: self.core.getAttribute(componentNode, 'name'),
                elements: {},
                bonds: {}
            };

        loadChildrenCallbackFunction = function (err, children) {
            if (err) {
                callback(err, null);
            }

            for (var i = 0; i < children.length; i += 1) {
                childNode = children[i];
                metaNode = self.getMetaType(childNode);
                metaName = self.core.getAttribute(metaNode, 'name');

                //if (metaNode === self.metaTypes.ComponentConnection) {
                if (self.isMetaTypeOf(childNode, self.metaTypes.ComponentConnection)) {
                    bondCount += 1;
                    bond = {
                        src: self.core.getPointerPath(childNode, 'src'),
                        dst: self.core.getPointerPath(childNode, 'dst')
                    };

                    componentInfo.bonds[bondCount] = bond;
                } else {
                    elementCount += 1;
                    element = {
                        ID: self.core.getGuid(childNode),
                        Name: self.core.getAttribute(childNode, 'name'),
                        Type: metaName,
                        Equation: 'N/A',
                        Ratio: 0
                        //Bond: ''
                    };

                    if (metaNode === self.metaTypes.ControlPort ||
                        metaNode === self.metaTypes.ResistivePort ||
                        metaNode === self.metaTypes.StoragePort) {
                        element.Equation = self.core.getAttribute(childNode, 'Equation');
                    }
                    if (metaNode === self.metaTypes.Gyrator ||
                        metaNode === self.metaTypes.Transformer) {
                        element.Ratio = parseFloat(self.core.getAttribute(childNode, 'Ratio'));
                    }

                    componentInfo.elements[elementCount] = element;
                }
            }

            callback(null, componentInfo);
        };

        self.core.loadChildren(componentNode, loadChildrenCallbackFunction);
    };

    return C2MF;
});