/**
* Generated by PluginGenerator from webgme on Mon May 05 2014 14:15:38 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/CoreAndMeta/CoreAndMeta/meta'], function (PluginConfig, PluginBase, MetaTypes) {
    'use strict';

    /**
    * Initializes a new instance of CoreAndMeta.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin CoreAndMeta.
    * @constructor
    */
    var CoreAndMeta = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    CoreAndMeta.prototype = Object.create(PluginBase.prototype);
    CoreAndMeta.prototype.constructor = CoreAndMeta;

    /**
    * Gets the name of the CoreAndMeta.
    * @returns {string} The name of the plugin.
    * @public
    */
    CoreAndMeta.prototype.getName = function () {
        return "Core and META";
    };

    /**
    * Gets the semantic version (semver.org) of the CoreAndMeta.
    * @returns {string} The version of the plugin.
    * @public
    */
    CoreAndMeta.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    CoreAndMeta.prototype.main = function (callback) {
        var self = this,
            i,
            pos,
            duplicateNode,
            newNode,
            childNode,
            metaTypeNode;
        // The use of metaTypes instead of self.META is only to get code completion.
        self.updateMETA(self.metaTypes);

        if (!self.activeNode) {
            self.logger.error('No activeNode given');
            self.createMessage(self.rootNode, 'No activeNode given.');
            callback('No activeNode given', self.result);
            return;
        }

        // Duplicate the active-node in side the parent of activeNode.
        duplicateNode = self.core.copyNode(self.activeNode, self.core.getParent(self.activeNode));
        // Create a new FCO node inside the duplicate and set the name and position.
        newNode = self.core.createNode({base: self.metaTypes.FCO, parent: duplicateNode});
        self.core.setAttribute(newNode, 'name', 'newNodeInDuplicate');
        self.core.setRegistry(newNode, 'position', {x: 150, y: 150});
        // Create three new child nodes inside the newNode.
        for (i = 0; i < 3; i += 1) {
            childNode = self.core.createNode({base: self.metaTypes.FCO, parent: newNode});
            self.core.setAttribute(childNode, 'name', 'childNode' + i.toString());
            self.core.setRegistry(childNode, 'position', {x: 100, y: 100 + i * 100});
        }
        // Load the children nodes (asynchronously) of newNode and log their names and positions and metaTypes.
        self.core.loadChildren(newNode, function (err, children) {
            if (err) {
                self.createMessage(newNode, 'Could not load children.');
                return callback('Could not load children of newNode', self.result);
            }
            for (i = 0; i < children.length; i += 1) {
                metaTypeNode = self.getMetaType(children[i]);
                pos = self.core.getRegistry(children[i], 'position');
                self.logger.info('Child Node "' + self.core.getAttribute(children[i], 'name') + '"');
                self.logger.info('is of type "' + self.core.getAttribute(metaTypeNode, 'name') + '"');
                self.logger.info('and has position (' + pos.x.toString() + ', ' + pos.y.toString() + ').');
            }

            self.save('added obj', function (err) {
                if (err) {
                    self.createMessage(self.rootNode, 'Could not save changes in project.');
                    return callback('Could not save changes in project.', self.result);
                }
                self.result.setSuccess(true);
                callback(null, self.result);
            });
        });
    };

    /**
    * Checks if the given node is of the given meta-type.
    * Usage: <tt>self.isMetaTypeOf(aNode, self.META['FCO']);</tt>
    * @param node - Node to be checked for type.
    * @param metaNode - Node object defining the meta type.
    * @returns {boolean} - True if the given object was of the META type.
    */
    CoreAndMeta.prototype.isMetaTypeOf = function (node, metaNode) {
        var self = this,
            metaGuid = self.core.getGuid(metaNode);
        while (node) {
            if (self.core.getGuid(node) === metaGuid) {
                return true;
            }
            node = self.core.getBase(node);
        }
        return false;
    };

    /**
    * Finds and returns the node object defining the meta type for the given node.
    * @param node - Node to be checked for type.
    * @returns {Object} - Node object defining the meta type of node.
    */
    CoreAndMeta.prototype.getMetaType = function (node) {
        var self = this,
            name;
        while (node) {
            name = self.core.getAttribute(node, 'name');
            if (self.META.hasOwnProperty(name) && self.core.getPath(self.META[name]) === self.core.getPath(node)) {
                break;
            }
            node = self.core.getBase(node);
        }
        return node;
    };

    /**
    * Returns true if node is a direct instance of a meta-type node (or a meta-type node itself).
    * @param node - Node to be checked.
    * @returns {boolean}
    */
    CoreAndMeta.prototype.baseIsMeta = function (node) {
        var self = this,
        baseName,
        baseNode = self.core.getBase(node);
        if (!baseNode) {
            // FCO does not have a base node, by definition function returns true.
            return true;
        }
        baseName = self.core.getAttribute(baseNode, 'name');
        return self.META.hasOwnProperty(baseName) && self.core.getPath(self.META[baseName]) === self.core.getPath(baseNode);
    };

    return CoreAndMeta;
});