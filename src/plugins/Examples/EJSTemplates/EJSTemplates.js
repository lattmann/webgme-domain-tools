/**
* Generated by PluginGenerator from webgme on Mon May 05 2014 15:54:07 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig',
    'plugin/PluginBase',
    'plugin/EJSTemplates/EJSTemplates/Templates/Templates',
    'ejs'], function (PluginConfig, PluginBase, TEMPLATES, ejs) {
    'use strict';

    /**
    * Initializes a new instance of EJSTemplates.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin EJSTemplates.
    * @constructor
    */
    var EJSTemplates = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    EJSTemplates.prototype = Object.create(PluginBase.prototype);
    EJSTemplates.prototype.constructor = EJSTemplates;

    /**
    * Gets the name of the EJSTemplates.
    * @returns {string} The name of the plugin.
    * @public
    */
    EJSTemplates.prototype.getName = function () {
        return "EJS Templates";
    };

    /**
    * Gets the semantic version (semver.org) of the EJSTemplates.
    * @returns {string} The version of the plugin.
    * @public
    */
    EJSTemplates.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    EJSTemplates.prototype.main = function (callback) {
        var self = this,
            templateData = {
                mainName: 'A Python Example',
                dataObjects: [
                    {a: 'a1', b: 'b1'},
                    {a: 'a2', b: 'b2'},
                    {a: 'a3', b: 'b3'}
                ]
            },
            templateContent = ejs.render(TEMPLATES['Python.py.ejs'], templateData),
            templateFileName = 'print_data.py',
            artifact = self.blobClient.createArtifact('pythonFiles');
        self.logger.info('Converted Template:\n' + templateContent);
        artifact.addFile(templateFileName, templateContent, function (err, hash) {
            if (err) {
                self.result.setSuccess(false);
                return callback('Could not add file : err' + err.toString(), self.result);
            }
            self.logger.info('File (meta-data) have hash: ' + hash);
            artifact.save(function (err, hash) {
                if (err) {
                    self.result.setSuccess(false);
                    return callback('Could not save artifact : err' + err.toString(), self.result);
                }
                self.logger.info('Artifact (meta-data) has hash: ' + hash);
                self.result.addArtifact(hash);
                self.result.setSuccess(true);
                callback(null, self.result);
            });
        });
    };

    return EJSTemplates;
});