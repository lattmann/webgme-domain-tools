/**
* Generated by PluginGenerator from webgme on Fri Apr 04 2014 13:44:18 GMT-0500 (Central Daylight Time)
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of Benchmark.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin Benchmark.
    * @constructor
    */
    var Benchmark = function () {
        // Call base class's constructor
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    Benchmark.prototype = Object.create(PluginBase.prototype);
    Benchmark.prototype.constructor = Benchmark;

    /**
    * Gets the name of the Benchmark.
    * @returns {string} The name of the plugin.
    * @public
    */
    Benchmark.prototype.getName = function () {
        return "Benchmark";
    };

    /**
    * Gets the description of the Benchmark.
    * @returns {string} The description of the plugin.
    * @public
    */
    Benchmark.prototype.getVersion = function () {
        return "Description for Benchmark";
    };

    /**
    * Gets the semantic version (semver.org) of the Benchmark.
    * @returns {string} The version of the plugin.
    * @public
    */
    Benchmark.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Gets the configuration structure for the Benchmark.
    * The ConfigurationStructure defines the configuration for the plugin
    * and will be used to populate the GUI when invoking the plugin from webGME.
    * @returns {object} The version of the plugin.
    * @public
    */
    Benchmark.prototype.getConfigStructure = function () {
        return [
            {
                'name': 'n',
                'displayName': 'Number of Objects',
                'description': 'How many objects should created (>0).',
                'value': 10,
                'valueType': 'number',
                'readOnly': false
            }, {
                'name': 'save',
                'displayName': 'Save after completion.',
                'description': 'Does the animal eat other animals?',
                'value': false,
                'valueType': 'boolean',
                'readOnly': false
            }, {
                'name': 'quiet',
                'displayName': 'Quiet',
                'description': 'Log or not.',
                'value': true,
                'valueType': 'boolean',
                'readOnly': false
            }, {
                "name": 'metaType',
                'displayName': 'META Type',
                'description': 'META Type of Object to create.',
                'value': 'FCO',
                'valueType': 'string',
                'readOnly': false
            }
        ];
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always have to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    Benchmark.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            config = this.getCurrentConfig(),
            newNode,
            stats = {config: config},
            i,
            t_stamp = new Date();

        // Create n objects.
        for (i = 0; i < config.n; i += 1) {
            newNode = self.core.createNode({parent: self.rootNode, base: self.META[config.metaType]});
            self.core.setAttribute(newNode, 'name', 'My new obj');
            self.core.setRegistry(newNode, 'position', {x: 70 + 10 * i, y: 70 + 10 * i});
            if (config.quiet === false) {
                self.logger.info('Created new object!');
            }
        }

        stats.createObjects = (new Date() - t_stamp) / 1000;

        t_stamp = new Date();
        self.core.loadChildren(self.rootNode, function (err, childNodes) {
            var attrName,
                position;

            for (i = 0; i < childNodes.length; i += 1) {
                attrName = self.core.getAttribute(childNodes[i], 'name');
                position = self.core.getRegistry(newNode, 'position');
                if (config.quiet === false) {
                    self.logger.info('Found object named ' + newNode + ' at pos:' + position.toString());
                }
            }

            stats.getObjects = (new Date() - t_stamp) / 1000;

            self.fs.addFile('stat.json', JSON.stringify(stats, null, 4));
            self.fs.saveArtifact();
            self.result.setSuccess(true);
            if (config.save) {
                self.logger.info('Saving project.');
                self.save('added obj', function (err) {
                    callback(null, self.result);
                });
            } else {
                self.logger.info('Closing project without saving.');
                callback(null, self.result);
            }
        });

    };

    return Benchmark;
});