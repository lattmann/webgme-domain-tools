/**
* Generated by PluginGenerator from webgme on Mon Apr 07 2014 15:59:37 GMT-0500 (Central Daylight Time)
 * Run this with activeNode "/1023960100"
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of CoreExamples.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin CoreExamples.
    * @constructor
    */
    var CoreExamples = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    CoreExamples.prototype = Object.create(PluginBase.prototype);
    CoreExamples.prototype.constructor = CoreExamples;

    /**
    * Gets the name of the CoreExamples.
    * @returns {string} The name of the plugin.
    * @public
    */
    CoreExamples.prototype.getName = function () {
        return "Core Examples";
    };

    /**
    * Gets the description of the CoreExamples.
    * @returns {string} The description of the plugin.
    * @public
    */
    CoreExamples.prototype.getDescription = function () {
        return "Description for Core Examples";
    };

    /**
    * Gets the semantic version (semver.org) of the CoreExamples.
    * @returns {string} The version of the plugin.
    * @public
    */
    CoreExamples.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always have to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    CoreExamples.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;

        if (self.core.getPath(self.activeNode) !== '/1023960100') {
            self.logger.error('Run this interpreter on "/1023960100" (models in the root) as activeNode.');
            self.logger.error('Current activeNode was : ' + self.core.getPath(self.activeNode));
            self.result.setSuccess(false);
            callback('Run this interpreter on "/1023960100" as activeNode.', self.result);
            return;
        }

        self.core.loadChildren(self.activeNode, function (err, children) {
            var i,
                runningExamples = children.length;

            if (runningExamples === 0) {
                self.result.setSuccess(false);
                callback('The active node does not have any children. Are you using the right model?', self.result);
                return;
            }

            for (i = 0; i < children.length; i += 1) {
                (function (element) {
                    // function is needed to get a reference for each element in the array
                    self.core.loadChildren(element, function (err1, children1) {
                        var name = self.core.getAttribute(element, 'name');
                        self.logger.debug(name);
                        if (name === 'ConnectionExample') {
                            self.connectionExample(self, children1, function (err) {
                                runningExamples -= 1;
                                if (runningExamples === 0) {
                                    self.result.setSuccess(true);
                                    callback(err, self.result);
                                }
                            });
                        } else if (name === 'ReferenceExample') {
                            self.logger.debug('ReferenceExample to be done...');
                            runningExamples -= 1;
                            if (runningExamples === 0) {
                                self.result.setSuccess(true);
                                callback(err, self.result);
                            }
                        } else if (name === 'ParentExample') {
                            self.logger.debug('ParentExample to be done...');
                            runningExamples -= 1;
                            if (runningExamples === 0) {
                                self.result.setSuccess(true);
                                callback(err, self.result);
                            }
                        } else {
                            self.logger.debug('Found unexpected child, ' + name + ', inside Models.');
                            runningExamples -= 1;
                            if (runningExamples === 0) {
                                self.result.setSuccess(true);
                                callback(err, self.result);
                            }
                        }
                    });
                })(children[i]);
            }
        });
    };

    CoreExamples.prototype.connectionExample = function (self, children, callback) {
        var i,
            childrenVisits = children.length,
            err = '';

        for (i = 0; i < children.length; i += 1) {
            (function (childNode) {
                if (self.isMetaTypeOf(self, childNode, self.META['PortElement'])) {

                    self.visitPorts(self, childNode, function (err) {
                        err += err;
                        childrenVisits -= 1;
                        if (childrenVisits === 0) {
                            callback(err);
                        }
                    });
                } else {
                    childrenVisits -= 1;
                    if (childrenVisits === 0) {
                        callback(err);
                    }
                }
            })(children[i]);
        }
        //callback(null, self.result);
    };

    CoreExamples.prototype.visitPorts = function (self, portNode, callback) {
        var j,
            collectionNames = self.core.getCollectionNames(portNode),
            err = '';

        if (collectionNames.indexOf('src') === -1) {
            callback(err);
        } else {
            self.core.loadCollection(portNode, 'src', function (err, connections) {
                var connectionVisits = connections.length;
                for (j = 0; j < connections.length; j += 1) {
                    (function (connection) {
                        if (self.core.hasPointer(connection, 'dst') === false) {
                            // TODO: This error does not seem to happen.
                            err += ' connection with src but without dst exists in model!';
                            connectionVisits -= 1;
                            if (connectionVisits === 0) {
                                callback(err);
                            }
                        } else {
                            self.core.loadPointer(connection, 'dst', function (err, dst) {
                                var srcName = self.core.getAttribute(portNode, 'name'),
                                    dstName = self.core.getAttribute(dst, 'name'),
                                    connName = self.core.getAttribute(connection, 'name');
                                self.logger.info(connName + ' connects "' + srcName + '" and "' + dstName + '".');
                                connectionVisits -= 1;
                                if (connectionVisits === 0) {
                                    callback(err);
                                }
                            });
                        }
                    })(connections[j]);
                }
            });
        }
    };

    CoreExamples.prototype.isMetaTypeOf = function (self, nodeObj, metaTypeObj) {
        while (nodeObj) {
            if (self.core.getGuid(nodeObj) === self.core.getGuid(metaTypeObj)) {
                return true;
            }
            nodeObj = self.core.getBase(nodeObj);
        }
        return false;
    };

    return CoreExamples;
});