/**
* Generated by PluginGenerator from webgme on Mon Apr 07 2014 15:59:37 GMT-0500 (Central Daylight Time)
 * Run this with activeNode "/1023960100"
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of CoreExamples.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin CoreExamples.
    * @constructor
    */
    var CoreExamples = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    CoreExamples.prototype = Object.create(PluginBase.prototype);
    CoreExamples.prototype.constructor = CoreExamples;

    /**
    * Gets the name of the CoreExamples.
    * @returns {string} The name of the plugin.
    * @public
    */
    CoreExamples.prototype.getName = function () {
        return "Core Examples";
    };

    /**
    * Gets the description of the CoreExamples.
    * @returns {string} The description of the plugin.
    * @public
    */
    CoreExamples.prototype.getVersion = function () {
        return "Description for Core Examples";
    };

    /**
    * Gets the semantic version (semver.org) of the CoreExamples.
    * @returns {string} The version of the plugin.
    * @public
    */
    CoreExamples.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always have to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    CoreExamples.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;

        if (self.core.getRelid(self.activeNode) !== '1023960100') {
            self.logger.error('Run this interpreter on "/1023960100" (models in the root) as activeNode.');
            self.logger.error('Current activeNode was : ' + self.core.getRelid(self.activeNode));
            self.result.setSuccess(false);
            callback('Run this interpreter on "/1023960100" as activeNode.', self.result);
            return;
        }

        self.core.loadChildren(self.activeNode, function (err, children) {
            var exampleNode,
                name,
                i;

            for (i = 0; i < children.length; i += 1) {
                exampleNode = children[i];
                self.core.loadChildren(exampleNode, function (err1, children1) {
                    name = self.core.getAttribute(exampleNode, 'name');
                    if (name === 'ConnectionExample') {
                        self.connectionExample(self, children1, callback);
                    } else if (name === 'ReferenceExample') {

                    } else if (name === 'ParentExample') {

                    } else {
                        self.logger('Found unexpected child, ' + name + ', inside Models.');
                    }
                });

            }
        });


        // Uncomment to save changes.
        //self.save('added obj', function (err) {

        //});

    };

//    CoreExamples.prototype.executeExampleOnChild = function (self, children, callback) {
//
//    };

    CoreExamples.prototype.connectionExample = function (self, children, callback) {
        var i,
            childNode,
            port,
            baseNode;
        for (i = 0; i < children.length; i += 1) {
            childNode = children[i];
            if (self.isMetaTypeOf(self, childNode, self.META['PortElement'])) {
                port = childNode;
                var nn = self.core.getCollectionNames(port);

                self.logger.info(nn.toString());
            }
        }
        callback(null, self.result);
    };

    CoreExamples.prototype.isMetaTypeOf = function (self, nodeObj, metaTypeObj) {
        while (nodeObj) {
            if (self.core.getGuid(nodeObj) === self.core.getGuid(metaTypeObj)) {
                return true;
            }
            nodeObj = self.core.getBase(nodeObj);
        }
        return false;
    };

    return CoreExamples;
});