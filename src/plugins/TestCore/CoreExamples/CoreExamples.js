/**
* Generated by PluginGenerator from webgme on Mon Apr 07 2014 15:59:37 GMT-0500 (Central Daylight Time)
 * Run this with activeNode "/1023960100"
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of CoreExamples.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin CoreExamples.
    * @constructor
    */
    var CoreExamples = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    CoreExamples.prototype = Object.create(PluginBase.prototype);
    CoreExamples.prototype.constructor = CoreExamples;

    /**
    * Gets the name of the CoreExamples.
    * @returns {string} The name of the plugin.
    * @public
    */
    CoreExamples.prototype.getName = function () {
        return "Core Examples";
    };

    /**
    * Gets the description of the CoreExamples.
    * @returns {string} The description of the plugin.
    * @public
    */
    CoreExamples.prototype.getDescription = function () {
        return "Run on TestCore project to illustrate common CoreAPI functions.";
    };

    /**
    * Gets the semantic version (semver.org) of the CoreExamples.
    * @returns {string} The version of the plugin.
    * @public
    */
    CoreExamples.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always have to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    CoreExamples.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            error = '';


        if (self.core.getPath(self.activeNode) !== '/1023960100') {
            self.logger.error('Run this interpreter on "/1023960100" (models in the root) as activeNode.');
            self.logger.error('Current activeNode was : ' + self.core.getPath(self.activeNode));
            self.result.setSuccess(false);
            callback('Run this interpreter on "/1023960100" as activeNode.', self.result);
            return;
        }

        self.core.loadChildren(self.activeNode, function (err, children) {
            var i,
                runningExamples = children.length;

            if (runningExamples === 0) {
                self.result.setSuccess(false);
                callback('The active node does not have any children. Are you using the right model?', self.result);
                return;
            }

            for (i = 0; i < children.length; i += 1) {
                (function (element) {
                    // Load children here since all examples require this.
                    self.core.loadChildren(element, function (err1, children1) {
                        var name = self.core.getAttribute(element, 'name');
                        if (err1) {
                            runningExamples -= 1;
                            error += ' LoadChildren failed for ' + name + ' with error : ' + err1;
                            if (runningExamples === 0) {
                                self.result.setSuccess(false);
                                callback(error, self.result);
                            }
                        } else if (name === 'ParentExample') {
                            self.logger.info('Starting work on ' + name + '...');
                            self.parentExample(self, children1, function (err) {
                                self.logger.info('Done with ' + name + '!');
                                runningExamples -= 1;
                                error = err ? error += err : error;
                                if (runningExamples === 0) {
                                    if (error) {
                                        self.result.setSuccess(false);
                                        callback(error, self.result);
                                    } else {
                                        self.result.setSuccess(true);
                                        callback(null, self.result);
                                    }
                                }
                            });
                        } else if (name === 'ConnectionExample') {
                            self.logger.info('Starting work on ' + name + '...');
                            self.connectionExample(self, children1, function (err) {
                                self.logger.info('Done with ' + name + '!');
                                runningExamples -= 1;
                                error = err ? error += err : error;
                                if (runningExamples === 0) {
                                    if (error) {
                                        self.result.setSuccess(false);
                                        callback(error, self.result);
                                    } else {
                                        self.result.setSuccess(true);
                                        callback(null, self.result);
                                    }
                                }
                            });
                        } else if (name === 'ReferenceExample') {
                            self.logger.info('Starting work on ' + name + '...');
                            self.referenceExample(self, children1, function (err) {
                                self.logger.info('Done with ' + name + '!');
                                runningExamples -= 1;
                                error = err ? error += err : error;
                                if (runningExamples === 0) {
                                    if (error) {
                                        self.result.setSuccess(false);
                                        callback(error, self.result);
                                    } else {
                                        self.result.setSuccess(true);
                                        callback(null, self.result);
                                    }
                                }
                            });
                        } else if (name === 'RecursiveChildrenExample') {
                            self.logger.info('Starting work on ' + name + '...');
                            self.recursiveChildrenExample(self, children1, {visits: 0}, function (err) {
                                self.logger.info('Done with ' + name + '!');
                                runningExamples -= 1;
                                error = err ? error += err : error;
                                if (runningExamples === 0) {
                                    if (error) {
                                        self.result.setSuccess(false);
                                        callback(error, self.result);
                                    } else {
                                        self.result.setSuccess(true);
                                        callback(null, self.result);
                                    }
                                }
                            });
                        } else {
                            self.logger.debug('Found unexpected child, ' + name + ', inside Models.');
                            runningExamples -= 1;
                            if (runningExamples === 0) {
                                if (error) {
                                    self.result.setSuccess(false);
                                    callback(error, self.result);
                                } else {
                                    self.result.setSuccess(true);
                                    callback(null, self.result);
                                }
                            }
                        }
                    });
                })(children[i]);
            }
        });
    };

// --------------------------------- Parent Example -------------------------------------
    CoreExamples.prototype.parentExample = function (self, children, callback) {
        var i,
            childrenVisits = children.length,
            error = '';

        if (childrenVisits === 0) {
            callback('The starting node in ParentExample did not have any children!?');
        }

        for (i = 0; i < children.length; i += 1) {
            (function (childNode) {
                var name = self.core.getAttribute(childNode, 'name');
                if (name === 'm_parent') {
                    self.compareParentAndChildsParent(self, childNode, function (err) {
                        error = err ? error += err : error;
                        childrenVisits -= 1;
                        if (childrenVisits === 0) {
                            callback(error);
                        }
                    });
                } else {
                    childrenVisits -= 1;
                    if (childrenVisits === 0) {
                        callback(error);
                    }
                }
            })(children[i]);
        }
    };

    CoreExamples.prototype.compareParentAndChildsParent = function (self, parentNode, callback) {
        self.core.loadChildren(parentNode, function (err, children) {
            var returnedParent,
                guid1, guid2,
                error = '';
            if (err) {
                callback(err);
            } else if (children.length === 0) {
                callback('m_parent did not have any children!?');
            } else {
                returnedParent = self.core.getParent(children[0]);
                guid1 = self.core.getGuid(parentNode);
                guid2 = self.core.getGuid(returnedParent);
                if (guid1 === guid2) {
                    self.logger.info("Parent och its child's parent had the same GUID (as expected).");
                } else {
                    error += "Parent och its child's parent had the same GUID (very weird indeed).";
                }
                callback(error);
            }
        });
    };

// --------------------------------- Connection Example ---------------------------------
    CoreExamples.prototype.connectionExample = function (self, children, callback) {
        var i,
            childrenVisits = children.length,
            error = '';

        if (childrenVisits === 0) {
            callback('The starting node in ConnectionExample did not have any children!?');
        }
        for (i = 0; i < children.length; i += 1) {
            (function (childNode) {
                if (self.isMetaTypeOf(self, childNode, self.META['PortElement'])) {

                    self.visitPorts(self, childNode, function (err) {
                        error += err;
                        childrenVisits -= 1;
                        if (childrenVisits === 0) {
                            callback(error);
                        }
                    });
                } else {
                    childrenVisits -= 1;
                    if (childrenVisits === 0) {
                        callback(error);
                    }
                }
            })(children[i]);
        }
    };

    CoreExamples.prototype.visitPorts = function (self, portNode, callback) {
        var j,
            collectionNames = self.core.getCollectionNames(portNode),
            error = '';

        if (collectionNames.indexOf('src') === -1) {
            callback(error);
        } else {
            self.core.loadCollection(portNode, 'src', function (err, connections) {
                var connectionVisits,
                    portName = self.core.getAttribute(portNode, 'name');
                if (err) {
                    error += ' loadCollection failed for ' + portName + ' with error : ' + err;
                    callback(error);
                    return;
                }
                connectionVisits = connections.length;
                for (j = 0; j < connections.length; j += 1) {
                    (function (connection) {
                        if (self.core.hasPointer(connection, 'dst') === false) {
                            // This error does not seem to happen.
                            error += ' A connection with src but without dst exists in model!';
                            connectionVisits -= 1;
                            if (connectionVisits === 0) {
                                callback(error);
                            }
                        } else {
                            self.core.loadPointer(connection, 'dst', function (err, dst) {
                                var dstName,
                                    connName;
                                if (err) {
                                    error += ' loadPointer failed for ' + portName + ' with error : ' + err;
                                } else {
                                    dstName = self.core.getAttribute(dst, 'name');
                                    connName = self.core.getAttribute(connection, 'name');
                                    self.logger.info(connName + ' connects "' + portName + '" and "' + dstName + '".');
                                }
                                connectionVisits -= 1;
                                if (connectionVisits === 0) {
                                    callback(error);
                                }
                            });
                        }
                    })(connections[j]);
                }
            });
        }
    };

// --------------------------------- Reference Example ----------------------------------
    CoreExamples.prototype.referenceExample = function (self, children, callback) {
        var i,
            childNode,
            reference,
            original,
            error = '';
        for (i = 0; i < children.length; i += 1) {
            childNode = children[i];
            if (self.isMetaTypeOf(self, childNode, self.META['ModelElement'])) {
                original = childNode;
            } else if (self.isMetaTypeOf(self, childNode, self.META['ModelRef'])) {
                reference = childNode;
            }
        }

        if (self.core.hasPointer(reference, 'ref')) {
            self.core.loadPointer(reference, 'ref', function (err, referredNode) {
                var guid1,
                    guid2;
                guid1 = self.core.getGuid(original);
                guid2 = self.core.getGuid(referredNode);
                if (guid1 === guid2) {
                    self.logger.info('Reference and original node had the same GUID (as expected).');
                } else {
                    error = 'Reference and original node did not have the same GUID!';
                }
            });
        } else {
            error = 'Reference did not have a ref pointer!';
        }
        callback(error);
    };

// ------------------------------ Recursive Children Example ----------------------------
    CoreExamples.prototype.recursiveChildrenExample = function (self, children, counter, callback) {
        var i,
            error = '';
        counter.visits += children.length;
        for (i = 0; i < children.length; i += 1) {
            (function (childNode) {
                self.logger.info(':: RecursiveChildrenExample :: at ' + self.core.getAttribute(childNode, 'name'));
                if (self.isMetaTypeOf(self, childNode, self.META['ModelElement'])) {
                    self.core.loadChildren(childNode, function (err, subChildren) {
                        counter.visits -= 1;
                        self.recursiveChildrenExample(self, subChildren, counter, function (err1) {
                            if (counter.visits === 0) {
                                callback(error);
                            }
                        });
                    });
                } else {
                    counter.visits -= 1;
                    if (counter.visits === 0) {
                        callback(error);
                    }
                }
            })(children[i]);
        }
    };

    CoreExamples.prototype.isMetaTypeOf = function (self, nodeObj, metaTypeObj) {
        while (nodeObj) {
            if (self.core.getGuid(nodeObj) === self.core.getGuid(metaTypeObj)) {
                return true;
            }
            nodeObj = self.core.getBase(nodeObj);
        }
        return false;
    };

    return CoreExamples;
});