/**
* Generated by PluginGenerator from webgme on Mon Apr 07 2014 15:59:37 GMT-0500 (Central Daylight Time)
 * Run this with activeNode "/1023960100"
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of CoreExamples.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin CoreExamples.
    * @constructor
    */
    var CoreExamples = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    CoreExamples.prototype = Object.create(PluginBase.prototype);
    CoreExamples.prototype.constructor = CoreExamples;

    /**
    * Gets the name of the CoreExamples.
    * @returns {string} The name of the plugin.
    * @public
    */
    CoreExamples.prototype.getName = function () {
        return "Core Examples";
    };

    /**
    * Gets the description of the CoreExamples.
    * @returns {string} The description of the plugin.
    * @public
    */
    CoreExamples.prototype.getDescription = function () {
        return "Description for Core Examples";
    };

    /**
    * Gets the semantic version (semver.org) of the CoreExamples.
    * @returns {string} The version of the plugin.
    * @public
    */
    CoreExamples.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always have to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    CoreExamples.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;

        if (self.core.getPath(self.activeNode) !== '/1023960100') {
            self.logger.error('Run this interpreter on "/1023960100" (models in the root) as activeNode.');
            self.logger.error('Current activeNode was : ' + self.core.getPath(self.activeNode));
            self.result.setSuccess(false);
            callback('Run this interpreter on "/1023960100" as activeNode.', self.result);
            return;
        }

        self.core.loadChildren(self.activeNode, function (err, children) {
            var i;
            // count how many elements we handled
            objectsToVisit += children.length;
            for (i = 0; i < children.length; i += 1) {
                visitedObjects += 1;
                (function (element) {
                    // function is needed to get a reference for each element in the array

                    self.core.loadChildren(element, function (err1, children1) {
                        var name = self.core.getAttribute(element, 'name');
                        self.logger.debug(name);

                        if (name === 'ConnectionExample') {
                            self.connectionExample(self, children1, callback);
                        } else if (name === 'ReferenceExample') {
                            self.logger.debug('ReferenceExample to be done...');
                        } else if (name === 'ParentExample') {
                            self.logger.debug('ParentExample to be done...');
                        } else {
                            self.logger.debug('Found unexpected child, ' + name + ', inside Models.');
                        }

                        visitedObjects += 1;

                        if (visitedObjects === objectsToVisit) {
                            // end of iteration if all elements are handled
                            self.logger.info('Calling callback!');
                            callback(null, self.result);
                        }

                    });
                })(children[i]);

            }
        });


        // Uncomment to save changes.
        //self.save('added obj', function (err) {

        //});

    };
    var objectsToVisit = 0,  // number of objects that have to be visited
        visitedObjects = 0; // number of already visited
//    CoreExamples.prototype.executeExampleOnChild = function (self, children, callback) {
//
//    };

    CoreExamples.prototype.connectionExample = function (self, children, callback) {
        var i, j,
            collectionNames;
        objectsToVisit += children.length;
        for (i = 0; i < children.length; i += 1) {
            visitedObjects += 1;
            (function (childNode) {
                if (self.isMetaTypeOf(self, childNode, self.META['PortElement'])) {
                    collectionNames = self.core.getCollectionNames(childNode);
                    if (collectionNames.indexOf('src') !== -1) {
                        self.core.loadCollection(childNode, 'src', function (err, connections) {
                            for (j = 0; j < connections.length; j += 1) {
                                (function (connection) {
                                    self.core.loadPointer(connection, 'dst', function (err, dst) {
                                        var srcName = self.core.getAttribute(childNode, 'name'),
                                            dstName = self.core.getAttribute(dst, 'name'),
                                            connName = self.core.getAttribute(connection, 'name');
                                        self.logger.info(connName + ' connects "' + srcName + '" and "' + dstName + '".');

                                    });
                                })(connections[j]);
                            }
                        });
                    }
                }
            })(children[i]);
        }
        //callback(null, self.result);
    };
//    /1023960100/425093889
//    /1023960100/425093889/187731387
    CoreExamples.prototype.isMetaTypeOf = function (self, nodeObj, metaTypeObj) {
        while (nodeObj) {
            if (self.core.getGuid(nodeObj) === self.core.getGuid(metaTypeObj)) {
                return true;
            }
            nodeObj = self.core.getBase(nodeObj);
        }
        return false;
    };

    return CoreExamples;
});