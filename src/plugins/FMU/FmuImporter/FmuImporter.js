/**
* Generated by PluginGenerator from webgme on Mon Apr 28 2014 13:58:17 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of FmuImporter.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin FmuImporter.
    * @constructor
    */
    var FmuImporter = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    FmuImporter.prototype = Object.create(PluginBase.prototype);
    FmuImporter.prototype.constructor = FmuImporter;

    /**
    * Gets the name of the FmuImporter.
    * @returns {string} The name of the plugin.
    * @public
    */
    FmuImporter.prototype.getName = function () {
        return "FMU Model Importer";
    };

    /**
    * Gets the semantic version (semver.org) of the FmuImporter.
    * @returns {string} The version of the plugin.
    * @public
    */
    FmuImporter.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Gets the description of the FmuImporter.
    * @returns {string} The description of the plugin.
    * @public
    */
    FmuImporter.prototype.getDescription = function () {
        return "Creates WebGME models for one or more uploaded FMUs";
    };

    /**
    * Gets the configuration structure for the FmuImporter.
    * The ConfigurationStructure defines the configuration for the plugin
    * and will be used to populate the GUI when invoking the plugin from webGME.
    * @returns {object} The version of the plugin.
    * @public
    */
    FmuImporter.prototype.getConfigStructure = function () {
        return [
            {
                'name': 'species',
                'displayName': 'Animal Species',
                'regex': '^[a-zA-Z]+$',
                'regexMessage': 'Name can only contain English characters!',
                'description': 'Which species does the animal belong to.',
                'value': 'Horse',
                'valueType': 'string',
                'readOnly': false
            },
            {
                'name': 'age',
                'displayName': 'Age',
                'description': 'How old is the animal.',
                'value': 3,
                'valueType': 'number',
                'minValue': 0,
                'maxValue': 10000,
                'readOnly': false
            },
            {
                'name': 'carnivor',
                'displayName': 'Carnivor',
                'description': 'Does the animal eat other animals?',
                'value': false,
                'valueType': 'boolean',
                'readOnly': false
            },
            {
                'name': 'classification',
                'displayName': 'Classification',
                'description': '',
                'value': 'Vertebrates',
                'valueType': 'string',
                'valueItems': [
                    'Vertebrates',
                    'Invertebrates',
                    'Unknown'
                ]
            },
            {
                "name": "color",
                "displayName": "Color",
                "description": 'The hex color code for the animal.',
                "readOnly": false,
                "value": '#FF0000',
                "regex": '^#([A-Fa-f0-9]{6})$',
                "valueType": "string"
            }
        ];
    };


    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    FmuImporter.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;
        // Using the logger.
        self.logger.info('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warning('This is a warning message.');
        self.logger.error('This is an error message.');

        // Obtain the current user configuration.
        var currentConfig = self.getCurrentConfig();
        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.result.setSuccess(true);
        self.save('added obj', function (err) {
            callback(null, self.result);
        });

    };

    /**
    * Checks if the given node is of the given meta-type.
    * Usage: <tt>self.isMetaTypeOf(aNode, self.META['FCO']);</tt>
    * @param node - Node to be checked for type.
    * @param metaNode - Node object defining the meta type.
    * @returns {boolean} - True if the given object was of the META type.
    */
    FmuImporter.prototype.isMetaTypeOf = function (node, metaNode) {
        var self = this,
            metaGuid = self.core.getGuid(metaNode);
        while (node) {
            if (self.core.getGuid(node) === metaGuid) {
                return true;
            }
            node = self.core.getBase(node);
        }
        return false;
    };

    /**
    * Finds and returns the node object defining the meta type for the given node.
    * @param node - Node to be checked for type.
    * @returns {Object} - Node object defining the meta type of node.
    */
    FmuImporter.prototype.getMetaType = function (node) {
        var self = this,
            name;
        while (node) {
            name = self.core.getAttribute(node, 'name');
            if (self.META.hasOwnProperty(name) && self.core.getPath(self.META[name]) === self.core.getPath(node)) {
                break;
            }
            node = self.core.getBase(node);
        }
        return node;
    };

    return FmuImporter;
});