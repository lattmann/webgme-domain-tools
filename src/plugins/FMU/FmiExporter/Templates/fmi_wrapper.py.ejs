#
# AUTO-GENERATED by FmiExporterPlugin (WebGME)
#

__author__ = 'James Klingler, ISIS Vanderbilt'


from pymodelica import compile_fmu   # JModelica.org's 'pymodelica'
from pyfmi import load_fmu

import logging

log = logging.getLogger()

class FMI_ME(object):

    def __init__(self, model_exchange_config):
    
        fmu_info_map = model_exchange_config['FMUs']
        sim_info = model_exchange_config['SimulationInfo']

        self.conn_map = model_exchange_config['Connections']        
        self.fmu_map = dict()
        self.priority_map = model_exchange_config['PriorityMap']
        self.sim_start_time = float(sim_info['StartTime'])
        self.sim_stop_time = float(sim_info['StopTime'])
        self.step_size = float(sim_info['StepSize'])
        
        self.load_fmus(fmu_info_map)

    def load_fmus(self, fmu_info_map):

        # Load and initialize the FMUs (parameters and simulation info)
        for fmu_path, fmu_instance_info in fmu_info_map.iteritems():
            fmu = FMU(fmu_instance_info, self.sim_start_time)
            self.fmu_map[fmu_path] = fmu

            
class FMU(object):

    def __init__(self, fmu_info, sim_start_time):

        self.name = fmu_info['InstanceName']
        fmu_file_path = fmu_info['File']
        self.pyfmi_fmu = load_fmu(fmu_file_path)
        self.set_instance_parameters(fmu_info['Parameters'])
        self.pyfmi_fmu.time = sim_start_time
        self.pyfmi_fmu.initialize()
        self.state_value_refs = self.pyfmi_fmu.get_state_value_references()
        self.time_varying_refs = self.pyfmi_fmu.get_model_time_varying_value_references()[0]
        
        self.input_map = self.make_inputs(fmu_info['Inputs'])
        self.output_map = self.make_outputs(fmu_info['Outputs'])


    def make_inputs(self, path_name_map):

        input_map = dict()
    
        for path, name in path_name_map.iteritems():
            v_ref = self.pyfmi_fmu.get_variable_valueref(name)
            input = INPUT(name, v_ref, self.name)
            input_map[path] = input

        return input_map

    def make_outputs(self, path_name_map):

        output_map = dict()
    
        for path, name in path_name_map.iteritems():
            v_ref = self.pyfmi_fmu.get_variable_valueref(name)
            output = OUTPUT(name, v_ref, self.name)
            output_map[path] = output

        return output_map
        
    def set_instance_parameters(self, parameter_map):

        names = list()
        values = list()

        for p_name, p_value in parameter_map.iteritems():

            # if '*' in p_value:
            #     continue
            #     multiply = p_value.split('*')

            names.append(p_name)
            values.append(p_value)

        self.pyfmi_fmu.set(names, values)

class INPUT(object):

    def __init__(self, input_name, value_ref, fmu_name):
    
        self.name = input_name
        self.value_ref = value_ref
        self.csv_row_header = fmu_name + '.' + input_name
        
class OUTPUT(object):

    def __init__(self, output_name, value_ref, fmu_name):
    
        self.name = output_name
        self.value_ref = value_ref
        self.csv_row_header = fmu_name + '.' + output_name