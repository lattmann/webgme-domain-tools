//define (['./<%- projectName %>.constructors'<%if(base){ %>, './<%- projectName %>.<%-base%>.Dsml'<%}%>], function (<%- projectName %><%if(base){ %>, <%-base%><%}%>) {
define (['./<%- projectName %>.constructors'], function (<%- projectName %>) {

    'use strict';

    <%
    if (base) {
    %>
    // This will give inheritance when checking types
    <%- projectName %>.<%- metaTypeName %>.prototype = Object.create(<%- projectName %>.<%- base %>.prototype);
    <%- projectName %>.<%- metaTypeName %>.prototype.constructor = <%- projectName %>.<%- metaTypeName %>;
<%  }%>

    //<editor-fold desc="<%- metaTypeName %> static fields, properties and functions">

    /**
    * WebGME node object that represents <%- metaTypeName %> type.
    * @type {nodeObj}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.Type = null; // this is set by the <%- projectName %>.initialize function

    /**
    * WebGME node object's meta type ID of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.ID = "<%- ID %>";

    /**
    * WebGME node object's meta type GUID of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.GUID = "<%- GUID %>";

    /**
    * WebGME node object's meta type hash value of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.Hash = "<%- Hash %>";

    <%
    if (isConnection) {
    %>
    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent, src, dst) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});
        <%- projectName %>._core.setPointer(nodeObj, 'src', src.getNodeObj());
        <%- projectName %>._core.setPointer(nodeObj, 'dst', dst.getNodeObj());
        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);
    };

    <%
    } else {
    %>
    /**
    * Creates a new <%- metaTypeName %> inside given parent.
    * @returns {<%- projectName %>.<%- metaTypeName %>} The newly created <%- metaTypeName %>.
    * @param {<%- projectName %>.FCO} parent Instance where the new <%- metaTypeName %> should be created.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});
        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);
    };

    <%
    }
    %>
    //</editor-fold>


    //<editor-fold desc="<%- metaTypeName %> create child objects">
    <%
for (var j = 0; j < children.length; j += 1) {
    var child = idMap[children[j]];
    %><%
    if (child.isConnection) {
        // FIXME: this is still buggy
    %>
    /**
    * Creates a new <%- projectName %>.<%- child.name %> inside this <%- metaTypeName %> instance with src and dst connected.
    * @param {<%- projectName %>.FCO} src The source of the new connection.
    * @param {<%- projectName %>.FCO} dst The destination of the new connection.
    * @returns {<%- projectName %>.<%- child.name %>} The newly created <%- child.name %>.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function (src, dst) {
        return <%- projectName %>.<%- child.name %>.createObj(this, src, dst);
    };
    <%
    } else {
    %>
    /**
    * Creates a new <%- projectName %>.<%- child.name %> inside this <%- metaTypeName %> instance.
    * @returns {<%- projectName %>.<%- child.name %>} The newly created <%- child.name %>.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function () {
        return <%- projectName %>.<%- child.name %>.createObj(this);
    };
    <% } %>
<%} %>
    //</editor-fold>

    <%- projectName %>.<%- metaTypeName %>.prototype.getNodeObj = function () { return this._nodeObj; };

    // TODO: get Id
    // TODO: get Guid

    //<editor-fold desc="<%- metaTypeName %> attributes">

    <%
    for (var i = 0; i < attributeNames.length; i += 1) {
        var attributeName = attributeNames[i];
    %>
    /**
    * Gets the attribute <%- attributeName %> of the <%- metaTypeName %> instance.
    * @returns {string|object} Currently set <%- attributeName %>.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.Attributes.prototype.get<%- attributeName %> = function () {
        return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');
    };

    /**
    * Sets the attribute <%- attributeName %> of the <%- metaTypeName %> instance.
    * @param {string|object} value New <%- attributeName %>.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.Attributes.prototype.set<%- attributeName %> = function (value) {
        return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);
    };

    <%
    }
    %>

    //</editor-fold>


    //<editor-fold desc="<%- metaTypeName %> registry entries">

    <%
    for (var i = 0; i < registryNames.length; i += 1) {
        var registryName = registryNames[i];
    %>
    /**
    * Gets the registry value <%- registryName %> of the <%- metaTypeName %> instance.
    * @returns {string|object} Currently set <%- registryName %>.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.Registry.prototype.get<%- registryName %> = function () {
        return <%- projectName %>._core.getRegistry(this._nodeObj, '<%- registryName %>');
    };

    /**
    * Sets the registry value <%- registryName %> of the <%- metaTypeName %> instance.
    * @param {string|object} value New registry value of <%- registryName %>.
    * @public
    */
    <%- projectName %>.<%- metaTypeName %>.Registry.prototype.set<%- registryName %> = function (value) {
        return <%- projectName %>._core.setRegistry(this._nodeObj, '<%- registryName %>', value);
    };

    <%
    }
    %>

    //</editor-fold>

    // TODO: DSML connections
    // TODO: DSML references
    // TODO: DSML sets
    // TODO: DSML pointers

    return <%- projectName %>.<%- metaTypeName %>;
});