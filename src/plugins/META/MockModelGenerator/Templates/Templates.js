/* Generated file based on ejs templates */
define([], function() {
    return {
    "coremockmodel.js.ejs": "define(['mocks/CoreMock'], function (CoreMock) {\r\n    var core = new CoreMock(<%=timeOut%>),\r\n        meta;\r\n\r\n    meta = createMETATypesTests(core);\r\n\r\n    var <%=activeNode.ID%> = core.createNode({base: meta.<%=activeNode.metaType%>, parent: core._rootNode});\r\n    core.setAttribute(<%=activeNode.ID%>, 'name', '<%=activeNode.name%>');\r\n\r\n<%\r\nvar nodeData, i;\r\nfor (i = 0; i < nodes.length; i += 1) {\r\n    nodeData = nodes[i];\r\n%>\r\n    var <%=nodeData.ID%> = core.createNode({\r\n        base: meta.<%=nodeData.metaType%>,\r\n        parent: <%=nodeData.parentID%>\r\n    });\r\n    core.setAttribute(<%=nodeData.ID%>, 'name', '<%=nodeData.name%>');\r\n<%}%>\r\n\r\n    function createMETATypesTests (core) {\r\n        var META = {},\r\n        options = {},\r\n        node;\r\n        // FIXME: This does not account for inheritance at this stage.\r\n<% var metaTypeName;\r\nfor (i = 0; i < metaTypeNames.length; i += 1) {\r\n    metaTypeName = metaTypeNames[i];\r\n%>\r\n        node = core.createNode(options);\r\n        core.setAttribute(node, 'name', '<%- metaTypeName %>');\r\n        META.<%- metaTypeName %> = node;\r\n<%}%>\r\n        return META;\r\n    }\r\n\r\n    return core;\r\n});"
}});