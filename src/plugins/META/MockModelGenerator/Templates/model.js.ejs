/**
* Generated by MockModelGenerator from webgme on <%= date %>.
*/

define(['mocks/CoreMock', './META'], function (CoreMock, createMeta) {
    'use strict';
    var core = new CoreMock(<%=timeOut%>),
        META = createMeta(core),
        options;

    options = {
        base: META.<%=activeNode.metaType%>,
        parent: core._rootNode,
        attr: {
<%
var nodeData, i, key, val, q;
for (key in activeNode.attr) {
    if (activeNode.attr.hasOwnProperty(key)){
        val = activeNode.attr[key];
        q = typeof val === 'string';
%>            '<%=key%>': <%if (q) {%>'<%=val%>'<%}else{%><%=val%><%}%>,
<%}}%>        }
    };
    var <%=activeNode.ID%> = core.createNode(options);
<%
for (i = 0; i < modelNodes.length; i += 1) {
    nodeData = modelNodes[i];
%>
    options = {
        base: META.<%=nodeData.metaType%>,
        parent: <%=nodeData.parentID%>,
        attr: {
<%  for (key in nodeData.attr) {
        if (nodeData.attr.hasOwnProperty(key)){
            val = activeNode.attr[key];
            q = typeof val === 'string';
%>            '<%=key%>': <%if (q) {%>'<%=val%>'<%}else{%><%=val%><%}%>,
<%}}%>        }
    };
    var <%=nodeData.ID%> = core.createNode(options);
<%}%>

    return {
        core: core,
        META: META,
        activeNode: <%=activeNode.ID%>
    };
});