/**
* Generated by PluginGenerator from webgme on Mon Apr 21 2014 15:57:17 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'ejs', 'plugin/MockModelGenerator/MockModelGenerator/Templates/Templates'], function (PluginConfig, PluginBase, EJS, TEMPLATES) {
    'use strict';

    /**
    * Initializes a new instance of MockModelGenerator.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin MockModelGenerator.
    * @constructor
    */
    var MockModelGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.modelNodes = [];
        this.metaNodes = [];
    };

    // Prototypal inheritance from PluginBase.
    MockModelGenerator.prototype = Object.create(PluginBase.prototype);
    MockModelGenerator.prototype.constructor = MockModelGenerator;

    if (!ejs) {
        ejs = EJS || window.ejs;
    }

    /**
    * Gets the name of the MockModelGenerator.
    * @returns {string} The name of the plugin.
    * @public
    */
    MockModelGenerator.prototype.getName = function () {
        return "Mock Model Generator";
    };

    /**
    * Gets the semantic version (semver.org) of the MockModelGenerator.
    * @returns {string} The version of the plugin.
    * @public
    */
    MockModelGenerator.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Gets the description of the MockModelGenerator.
    * @returns {string} The description of the plugin.
    * @public
    */
    MockModelGenerator.prototype.getDescription = function () {
        return "Generates CoreMock-code that will be instantiated to mock the model starting from the activeNode.  ";
    };

    /**
    * Gets the configuration structure for the MockModelGenerator.
    * The ConfigurationStructure defines the configuration for the plugin
    * and will be used to populate the GUI when invoking the plugin from webGME.
    * @returns {object} The version of the plugin.
    * @public
    */
    MockModelGenerator.prototype.getConfigStructure = function () {
        return [
            {
                'name': 'debug',
                'displayName': 'Do not save',
                'description': 'Will only print to the console.',
                'value': true,
                'valueType': 'boolean',
                'readOnly': false
            },
            {
                'name': 'timeOut',
                'displayName': 'Time out [ms]',
                'description': 'Time out time for asynchronous core methods.',
                'value': 10,
                "minValue": 1,
                "maxValue": 10000,
                'valueType': 'number',
                'readOnly': false
            }
        ];
    };


    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    MockModelGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            config = self.getCurrentConfig(),
            data = {},
            generateFiles;

        if (!self.activeNode) {
            callback('No activeNode given', self.result);
            return;
        }
        data.date = new Date();
        data.timeOut = config.timeOut;
        data.activeNode = {
            name: self.core.getAttribute(self.activeNode, 'name'),
            ID: 'ID' + self.core.getGuid(self.activeNode).replace(/-/gi, '_'),
            metaType: self.core.getAttribute(self.getMetaType(self.activeNode), 'name')
        };

        generateFiles = function () {
            var modelJS,
                fileName = 'test/models/' + self.projectName + '/coremockmodel.js',
                artifact;

            modelJS = ejs.render(TEMPLATES['coremockmodel.js.ejs'], data);
            artifact = self.blobClient.createArtifact('mockModels');
            artifact.addFile(fileName, modelJS, function (err, hash) {
                if (err) {
                    callback(err, self.result);
                    return;
                }
                self.logger.warning(hash);
                self.blobClient.saveAllArtifacts(function (err, hashes) {
                    if (err) {
                        callback(err, self.result);
                        return;
                    }
                    self.result.addArtifact(hashes[0]);
                    self.result.setSuccess(true);
                    callback(null, self.result);
                });
            });
        };

        self.visitAllChildren(self.activeNode, function (err) {
            if (err) {
                callback('failed to get modelNodes' + err, self.result);
                return;
            }
            // FIXME: This assumes that the bases are direct instances of META-Types.
            data.modelNodes = self.modelNodes;
            self.populateMetaNodes();
            data.metaNodes = self.metaNodes;
            generateFiles();
        });
    };

    MockModelGenerator.prototype.atModelNode = function (node, parent, siblings) {
        var self = this,
            metaTypeName = self.core.getAttribute(self.getMetaType(node), 'name'),
            nodeData = {
                name: self.core.getAttribute(node, 'name'),
                ID: 'ID' + self.core.getGuid(node).replace(/-/gi, '_'),
                parentID: 'ID' + self.core.getGuid(parent).replace(/-/gi, '_'),
                metaType: metaTypeName,
                base: metaTypeName,
                baseIsMeta: true
            };
        // TODO: Add case when base is non-meta
        // TODO: Add pointers (i.e. connections and such)
        self.modelNodes.push(nodeData);
        //self.logger.info('Added :: ' + JSON.stringify(nodeData, null, 4));
    };

    MockModelGenerator.prototype.populateMetaNodes = function () {
        var self = this,
            i,
            base,
            names = Object.keys(self.META),
            orderedMetaNodes = {},
            nbrOfBases = 0,
            nodeData,
            nodeDataType = {
                name: null,
                base: null
            };
        // Iterate over all meta-nodes and put their data in orderedMetaNodes
        // based on their number of bases.
        for (i = 0; i < names.length; i += 1) {
            nodeData = Object.create(nodeDataType);
            nodeData.name = names[i];
            base = self.core.getBase(self.META[names[i]]); // What happens for FCO?
            nbrOfBases = 0;
            if (base) {
                nodeData.base = self.core.getAttribute(base, 'name');
                while (base) {
                    nbrOfBases += 1;
                    base = self.core.getBase(base);
                }
            }
            if (orderedMetaNodes[nbrOfBases]) {
                orderedMetaNodes[nbrOfBases].push(nodeData);
            } else {
                orderedMetaNodes[nbrOfBases] = [nodeData];
            }
        }
        // When we have all data for the nodes move it over, sorted, to an array.
        self.populateMetaNodesOrdered(orderedMetaNodes);
    };

    /**
     * Populates self.metaNodes with meta-node data ordered first based on number of bases,
     * and secondly on the names.
     * @param metaNodes - dictionary with #bases as keys and arrays of nodeData as values.
     */
    MockModelGenerator.prototype.populateMetaNodesOrdered = function (metaNodes) {
        var self = this,
            subArray,
            keys = Object.keys(metaNodes),
            i,
            compare = function (a, b) {
                return a.name.localeCompare(b.name);
            };

        keys.sort();
        for (i = 0; i < keys.length; i += 1) {
            subArray = metaNodes[keys[i]];
            subArray.sort(compare);
            self.metaNodes = self.metaNodes.concat(subArray);
        }
    };

    MockModelGenerator.prototype.visitAllChildren = function (node, callback) {
        var self = this;
        self.core.loadChildren(node, function (err, children) {
            var counter,
                i,
                itrCallback,
                error = '';
            if (err) {
                callback('Could not load children for first object, err: ' + err);
                return;
            }
            counter = {visits: children.length};
            itrCallback = function (err) {
                error = err ? error += err : error;
                counter.visits -= 1;
                if (counter.visits === 0) {
                    callback(error);
                }
            };

            for (i = 0; i < children.length; i += 1) {
                self.atModelNode(children[i], node, children);
                self.visitAllChildrenRec(children[i], counter, itrCallback);
            }
        });
    };

    MockModelGenerator.prototype.visitAllChildrenRec = function (node, counter, callback) {
        var self = this;
        self.core.loadChildren(node, function (err, children) {
            var i;
            if (err) {
                callback('loadChildren failed for ' + node.toString());
                return;
            }
            counter.visits += children.length;
            if (children.length === 0) {
                callback(null);
            } else {
                counter.visits -= 1;
                for (i = 0; i < children.length; i += 1) {
                    self.atModelNode(children[i], node, children);
                    self.visitAllChildrenRec(children[i], counter, callback);
                }
            }
        });
    };

    /**
    * Checks if the given node is of the given meta-type.
    * Usage: <tt>self.isMetaTypeOf(aNode, self.META['FCO']);</tt>
    * @param node - Node to be checked for type.
    * @param metaNode - Node object defining the meta type.
    * @returns {boolean} - True if the given object was of the META type.
    */
    MockModelGenerator.prototype.isMetaTypeOf = function (node, metaNode) {
        var self = this,
            metaGuid = self.core.getGuid(metaNode);
        while (node) {
            if (self.core.getGuid(node) === metaGuid) {
                return true;
            }
            node = self.core.getBase(node);
        }
        return false;
    };

    /**
    * Finds and returns the node object defining the meta type for the given node.
    * @param node - Node to be checked for type.
    * @returns {Object} - Node object defining the meta type of node.
    */
    MockModelGenerator.prototype.getMetaType = function (node) {
        var self = this,
            name;
        while (node) {
            name = self.core.getAttribute(node, 'name');
            if (self.META.hasOwnProperty(name) && self.core.getPath(self.META[name]) === self.core.getPath(node)) {
                break;
            }
            node = self.core.getBase(node);
        }
        return node;
    };

    return MockModelGenerator;
});