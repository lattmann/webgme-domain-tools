/**
* Generated by PluginGenerator from webgme on <%= date %>
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
        'use strict';

        /**
        * Initializes a new instance of <%= pluginID %>.
        * @class
        * @augments {PluginBase}
        * @classdesc This class represents the plugin <%= pluginID %>.
        * @constructor
        */
        var <%= pluginID %> = function () {
            // Call base class's constructor
            PluginBase.call(this);
        };

        // Prototypal inheritance from PluginBase.
        <%= pluginID %>.prototype = Object.create(PluginBase.prototype);
        <%= pluginID %>.prototype.constructor = <%= pluginID %>;

        /**
        * Gets the name of the <%= pluginID %>.
        * @returns {string} The name of the plugin.
        * @public
        */
        <%= pluginID %>.prototype.getName = function () {
            return "<%= pluginName %>";
        };<% if (description) {%>

        /**
        * Gets the description of the <%= pluginID %>.
        * @returns {string} The description of the plugin.
        * @public
        */
        <%= pluginID %>.prototype.getVersion = function () {
            return "Description for <%= pluginName %>";
        };<%} if (hasVersion) {%>

        /**
        * Gets the semantic version (semver.org) of the <%= pluginID %>.
        * @returns {string} The version of the plugin.
        * @public
        */
        <%= pluginID %>.prototype.getVersion = function () {
            return "0.1.0";
        };<%}%>
        /**
        * Main function for the plugin to execute. This will perform the execution.
        * Notes:
        * - Always log with the provided logger.[error,warning,info,debug].
        * - Do NOT put any user interaction logic UI, etc. inside this method.
        * - callback always have to be called even if error happened.
        *
        * @param {function(string, plugin.PluginResult)} callback - the result callback
        */
        <%= pluginID %>.prototype.main = function (callback) {
            // Use self to access core, project, result, logger etc from PluginBase.
            // These are all instantiated at this point.
            var self = this;

            if (callback) {
                callback(null, self.result);
            }
        };

        return <%= pluginID %>;
});