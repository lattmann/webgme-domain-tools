/**
* Generated by PluginGenerator from webgme on <%= date %>
*/

define(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {
    'use strict';

    /**
    * Initializes a new instance of <%= pluginID %>.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin <%= pluginID %>.
    * @constructor
    */
    var <%= pluginID %> = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);
    <%= pluginID %>.prototype.constructor = <%= pluginID %>;

    /**
    * Gets the name of the <%= pluginID %>.
    * @returns {string} The name of the plugin.
    * @public
    */
    <%= pluginID %>.prototype.getName = function () {
        return "<%= pluginName %>";
    };<% if (description) {%>

    /**
    * Gets the description of the <%= pluginID %>.
    * @returns {string} The description of the plugin.
    * @public
    */
    <%= pluginID %>.prototype.getVersion = function () {
        return "Description for <%= pluginName %>";
    };<%} if (hasVersion) {%>

    /**
    * Gets the semantic version (semver.org) of the <%= pluginID %>.
    * @returns {string} The version of the plugin.
    * @public
    */
    <%= pluginID %>.prototype.getVersion = function () {
        return "0.1.0";
    };<%} if (configStructure) {%>

    /**
    * Gets the configuration structure for the <%= pluginID %>.
    * The ConfigurationStructure defines the configuration for the plugin
    * and will be used to populate the GUI when invoking the plugin from webGME.
    * @returns {object} The version of the plugin.
    * @public
    */
    <%= pluginID %>.prototype.getConfigStructure = function () {
        return [
            {
                "name": 'species',
                'displayName': 'Animal Species',
                'description': 'Which species does the animal belong to.',
                'value': 'Horse',
                'valueType': 'string',
                'readOnly': false
            }, {
                'name': 'age',
                'displayName': 'Age',
                'description': 'How old is the animal. (>0)',
                'value': 3,
                'valueType': 'number',
                'readOnly': false
            }, {
                'name': 'carnivor',
                'displayName': 'Carnivor',
                'description': 'Does the animal eat other animals?',
                'value': false,
                'valueType': 'boolean',
                'readOnly': false
            }, {
                'name': 'classification',
                'displayName': 'Classification',
                'description': '',
                'value': 'Vertebrates',
                'valueType': 'string',
                'valueItems': [
                    'Vertebrates',
                    'Invertebrates',
                    'Unknown'
                ]
            }
        ];
    };
<%}%>
    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always have to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    <%= pluginID %>.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;
        self.result.setSuccess(true);
<% if (core) {%>
        // Using core to create an object.
        var newNode = self.core.createNode({parent: self.rootNode, base: self.META['FCO']});
        self.core.setAttribute(newNode, 'name', 'My new obj');
        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});
<%}
if (logger) {%>
        // Using the logger.
        self.logger.info('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warning('This is a warning message.');
        self.logger.error('This is an error message.');
<%}
if (fs) {%>
        // self.fs works on both client and server side.
        self.fs.addFile('dir/subdir/file.txt', 'This is a text file.');
        self.fs.addFile('dir/subdir2/file2.txt', 'This is another text file.');
        self.fs.saveArtifact();
<%}
if (configStructure) {%>
        // Obtain the current user configuration.
        var currentConfig = this.getCurrentConfig();
        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));
<%}
if (core) { %>
        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.save('added obj', function (err) {
            callback(null, self.result);
        });
<%} else {%>
        // Uncomment to save changes.
        //self.save('added obj', function (err) {
            callback(null, self.result);
        //});
<%}%>
    };

    return <%= pluginID %>;
});