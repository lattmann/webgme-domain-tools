/* Generated file based on ejs templates */
define([], function() {
    return {
    "plugin.js.ejs": "/**\n* Generated by PluginGenerator from webgme on <%= date %>\n*/\n\ndefine(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {\n    'use strict';\n\n    /**\n    * Initializes a new instance of <%= pluginID %>.\n    * @class\n    * @augments {PluginBase}\n    * @classdesc This class represents the plugin <%= pluginID %>.\n    * @constructor\n    */\n    var <%= pluginID %> = function () {\n        // Call base class' constructor.\n        PluginBase.call(this);\n    };\n\n    // Prototypal inheritance from PluginBase.\n    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\n    <%= pluginID %>.prototype.constructor = <%= pluginID %>;\n\n    /**\n    * Gets the name of the <%= pluginID %>.\n    * @returns {string} The name of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getName = function () {\n        return \"<%= pluginName %>\";\n    };<% if (description) {%>\n\n    /**\n    * Gets the description of the <%= pluginID %>.\n    * @returns {string} The description of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getDescription = function () {\n        return \"Description for <%= pluginName %>\";\n    };<%} if (hasVersion) {%>\n\n    /**\n    * Gets the semantic version (semver.org) of the <%= pluginID %>.\n    * @returns {string} The version of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getVersion = function () {\n        return \"0.1.0\";\n    };<%} if (configStructure) {%>\n\n    /**\n    * Gets the configuration structure for the <%= pluginID %>.\n    * The ConfigurationStructure defines the configuration for the plugin\n    * and will be used to populate the GUI when invoking the plugin from webGME.\n    * @returns {object} The version of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getConfigStructure = function () {\n        return [\n            {\n                'name': 'species',\n                'displayName': 'Animal Species',\n                'description': 'Which species does the animal belong to.',\n                'value': 'Horse',\n                'valueType': 'string',\n                'readOnly': false\n            },\n            {\n                'name': 'age',\n                'displayName': 'Age',\n                'description': 'How old is the animal.',\n                'value': 3,\n                'valueType': 'number',\n                'minValue': 0,\n                'maxValue': 10000,\n                'readOnly': false\n            },\n            {\n                'name': 'carnivor',\n                'displayName': 'Carnivor',\n                'description': 'Does the animal eat other animals?',\n                'value': false,\n                'valueType': 'boolean',\n                'readOnly': false\n            },\n            {\n                'name': 'classification',\n                'displayName': 'Classification',\n                'description': '',\n                'value': 'Vertebrates',\n                'valueType': 'string',\n                'valueItems': [\n                    'Vertebrates',\n                    'Invertebrates',\n                    'Unknown'\n                ]\n            },\n            {\n                \"name\": \"color\",\n                \"displayName\": \"Color\",\n                \"description\": 'The hex color code for the animal.',\n                \"readOnly\": false,\n                \"value\": '#FF0000',\n                \"regex\": '^#([A-Fa-f0-9]{6})$',\n                \"valueType\": \"string\"\n            }\n        ];\n    };\n<%}%>\n    /**\n    * Main function for the plugin to execute. This will perform the execution.\n    * Notes:\n    * - Always log with the provided logger.[error,warning,info,debug].\n    * - Do NOT put any user interaction logic UI, etc. inside this method.\n    * - callback always have to be called even if error happened.\n    *\n    * @param {function(string, plugin.PluginResult)} callback - the result callback\n    */\n    <%= pluginID %>.prototype.main = function (callback) {\n        // Use self to access core, project, result, logger etc from PluginBase.\n        // These are all instantiated at this point.\n        var self = this;\n        self.result.setSuccess(true);\n<% if (core) {%>\n        // Using core to create an object.\n        var newNode = self.core.createNode({parent: self.rootNode, base: self.META['FCO']});\n        self.core.setAttribute(newNode, 'name', 'My new obj');\n        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});\n<%}\nif (logger) {%>\n        // Using the logger.\n        self.logger.info('This is a debug message.');\n        self.logger.info('This is an info message.');\n        self.logger.warning('This is a warning message.');\n        self.logger.error('This is an error message.');\n<%}\nif (fs) {%>\n        // self.fs works on both client and server side.\n        self.fs.addFile('dir/subdir/file.txt', 'This is a text file.');\n        self.fs.addFile('dir/subdir2/file2.txt', 'This is another text file.');\n        self.fs.saveArtifact();\n<%}\nif (configStructure) {%>\n        // Obtain the current user configuration.\n        var currentConfig = this.getCurrentConfig();\n        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));\n<%}\nif (core) { %>\n        // This will save the changes. If you don't want to save;\n        // exclude self.save and call callback directly from this scope.\n        self.save('added obj', function (err) {\n            callback(null, self.result);\n        });\n<%} else {%>\n        // Uncomment to save changes.\n        //self.save('added obj', function (err) {\n            callback(null, self.result);\n        //});\n<%}%>\n    };\n\n    return <%= pluginID %>;\n});"
}});