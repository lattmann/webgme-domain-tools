/* Generated file based on ejs templates */
define([], function() {
    return {
    "plugin.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>\r\n*/\r\n\r\ndefine(['plugin/PluginConfig', 'plugin/PluginBase'], function (PluginConfig, PluginBase) {\r\n        'use strict';\r\n\r\n        /**\r\n        * Initializes a new instance of <%= pluginID %>.\r\n        * @class\r\n        * @augments {PluginBase}\r\n        * @classdesc This class represents the plugin <%= pluginID %>.\r\n        * @constructor\r\n        */\r\n        var <%= pluginID %> = function () {\r\n            // Call base class's constructor\r\n            PluginBase.call(this);\r\n        };\r\n\r\n        // Prototypal inheritance from PluginBase.\r\n        <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\r\n        <%= pluginID %>.prototype.constructor = <%= pluginID %>;\r\n\r\n        /**\r\n        * Gets the name of the <%= pluginID %>.\r\n        * @returns {string} The name of the plugin.\r\n        * @public\r\n        */\r\n        <%= pluginID %>.prototype.getName = function () {\r\n            return \"<%= pluginName %>\";\r\n        };<% if (description) {%>\r\n\r\n        /**\r\n        * Gets the description of the <%= pluginID %>.\r\n        * @returns {string} The description of the plugin.\r\n        * @public\r\n        */\r\n        <%= pluginID %>.prototype.getVersion = function () {\r\n            return \"Description for <%= pluginName %>\";\r\n        };<%} if (hasVersion) {%>\r\n\r\n        /**\r\n        * Gets the semantic version (semver.org) of the <%= pluginID %>.\r\n        * @returns {string} The version of the plugin.\r\n        * @public\r\n        */\r\n        <%= pluginID %>.prototype.getVersion = function () {\r\n            return \"0.1.0\";\r\n        };<%}%>\r\n        /**\r\n        * Main function for the plugin to execute. This will perform the execution.\r\n        * Notes:\r\n        * - Always log with the provided logger.[error,warning,info,debug].\r\n        * - Do NOT put any user interaction logic UI, etc. inside this method.\r\n        * - callback always have to be called even if error happened.\r\n        *\r\n        * @param {function(string, plugin.PluginResult)} callback - the result callback\r\n        */\r\n        <%= pluginID %>.prototype.main = function (callback) {\r\n            // Use self to access core, project, result, logger etc from PluginBase.\r\n            // These are all instantiated at this point.\r\n            var self = this;\r\n\r\n            if (callback) {\r\n                callback(null, self.result);\r\n            }\r\n        };\r\n\r\n        return <%= pluginID %>;\r\n});"
}});