/* Generated file based on ejs templates */
define([], function() {
    return {
    "plugin.js.ejs": "/**\r\n* Generated by PluginGenerator from webgme on <%= date %>\r\n*/\r\n\r\ndefine(['plugin/PluginConfig', 'plugin/PluginBase'<%if (templateType) {%>, 'ejs', 'plugin/<%=pluginID%>/<%=pluginID%>/Templates/Templates'<%}%>], function (PluginConfig, PluginBase<%if (templateType) {%>, EJS, TEMPLATES<%}%>) {\r\n    'use strict';\r\n<%if (templateType) {%>\r\n    if (!ejs) {\r\n        ejs = EJS || window.ejs;\r\n    }\r\n<%}%>\r\n    /**\r\n    * Initializes a new instance of <%= pluginID %>.\r\n    * @class\r\n    * @augments {PluginBase}\r\n    * @classdesc This class represents the plugin <%= pluginID %>.\r\n    * @constructor\r\n    */\r\n    var <%= pluginID %> = function () {\r\n        // Call base class' constructor.\r\n        PluginBase.call(this);\r\n    };\r\n\r\n    // Prototypal inheritance from PluginBase.\r\n    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\r\n    <%= pluginID %>.prototype.constructor = <%= pluginID %>;\r\n\r\n    /**\r\n    * Gets the name of the <%= pluginID %>.\r\n    * @returns {string} The name of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getName = function () {\r\n        return \"<%= pluginName %>\";\r\n    };<% if (description) {%>\r\n\r\n    /**\r\n    * Gets the description of the <%= pluginID %>.\r\n    * @returns {string} The description of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getDescription = function () {\r\n        return \"Description for <%= pluginName %>\";\r\n    };<%} if (hasVersion) {%>\r\n\r\n    /**\r\n    * Gets the semantic version (semver.org) of the <%= pluginID %>.\r\n    * @returns {string} The version of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getVersion = function () {\r\n        return \"0.1.0\";\r\n    };<%} if (configStructure) {%>\r\n\r\n    /**\r\n    * Gets the configuration structure for the <%= pluginID %>.\r\n    * The ConfigurationStructure defines the configuration for the plugin\r\n    * and will be used to populate the GUI when invoking the plugin from webGME.\r\n    * @returns {object} The version of the plugin.\r\n    * @public\r\n    */\r\n    <%= pluginID %>.prototype.getConfigStructure = function () {\r\n        return [\r\n            {\r\n                'name': 'species',\r\n                'displayName': 'Animal Species',\r\n                'description': 'Which species does the animal belong to.',\r\n                'value': 'Horse',\r\n                'valueType': 'string',\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'age',\r\n                'displayName': 'Age',\r\n                'description': 'How old is the animal.',\r\n                'value': 3,\r\n                'valueType': 'number',\r\n                'minValue': 0,\r\n                'maxValue': 10000,\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'carnivor',\r\n                'displayName': 'Carnivor',\r\n                'description': 'Does the animal eat other animals?',\r\n                'value': false,\r\n                'valueType': 'boolean',\r\n                'readOnly': false\r\n            },\r\n            {\r\n                'name': 'classification',\r\n                'displayName': 'Classification',\r\n                'description': '',\r\n                'value': 'Vertebrates',\r\n                'valueType': 'string',\r\n                'valueItems': [\r\n                    'Vertebrates',\r\n                    'Invertebrates',\r\n                    'Unknown'\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"color\",\r\n                \"displayName\": \"Color\",\r\n                \"description\": 'The hex color code for the animal.',\r\n                \"readOnly\": false,\r\n                \"value\": '#FF0000',\r\n                \"regex\": '^#([A-Fa-f0-9]{6})$',\r\n                \"valueType\": \"string\"\r\n            }\r\n        ];\r\n    };\r\n<%}%>\r\n    /**\r\n    * Main function for the plugin to execute. This will perform the execution.\r\n    * Notes:\r\n    * - Always log with the provided logger.[error,warning,info,debug].\r\n    * - Do NOT put any user interaction logic UI, etc. inside this method.\r\n    * - callback always have to be called even if error happened.\r\n    *\r\n    * @param {function(string, plugin.PluginResult)} callback - the result callback\r\n    */\r\n    <%= pluginID %>.prototype.main = function (callback) {\r\n        // Use self to access core, project, result, logger etc from PluginBase.\r\n        // These are all instantiated at this point.\r\n        var self = this;\r\n        self.result.setSuccess(true);\r\n<% if (core) {%>\r\n        // Using core to create an object.\r\n        var newNode = self.core.createNode({parent: self.rootNode, base: self.META['FCO']});\r\n        self.core.setAttribute(newNode, 'name', 'My new obj');\r\n        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});\r\n<%}\r\nif (logger) {%>\r\n        // Using the logger.\r\n        self.logger.info('This is a debug message.');\r\n        self.logger.info('This is an info message.');\r\n        self.logger.warning('This is a warning message.');\r\n        self.logger.error('This is an error message.');\r\n<%}\r\nif (templateType) {%>\r\n        // To transform ejs file into js file (needed for client-side runs) run combine_templates\r\n        // see instructions in file. You must run this after any modifications to the ejs template.\r\n        // https://github.com/webgme/webgme-domain-tools/blob/master/src/tools/combine_templates.js\r\n        var template<%=templateExt.toUpperCase()%> = ejs.render(TEMPLATES['<%=templateType%>.<%=templateExt%>.ejs'], {a: 'a', b: 'b'});\r\n        self.fs.addFile('generatedFiles/<%=templateType%>.<%=templateExt%>', template<%=templateExt.toUpperCase()%>);\r\n<%if (!fs) {%>        self.fs.saveArtifact();<%}%>\r\n<%}\r\nif (fs) {%>\r\n        // self.fs works on both client and server side.\r\n        self.fs.addFile('dir/subdir/file.txt', 'This is a text file.');\r\n        self.fs.addFile('dir/subdir2/file2.txt', 'This is another text file.');\r\n        self.fs.saveArtifact();\r\n<%}\r\nif (configStructure) {%>\r\n        // Obtain the current user configuration.\r\n        var currentConfig = this.getCurrentConfig();\r\n        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));\r\n<%}\r\nif (core) { %>\r\n        // This will save the changes. If you don't want to save;\r\n        // exclude self.save and call callback directly from this scope.\r\n        self.save('added obj', function (err) {\r\n            callback(null, self.result);\r\n        });\r\n<%} else {%>\r\n        // Uncomment to save changes.\r\n        //self.save('added obj', function (err) {\r\n            callback(null, self.result);\r\n        //});\r\n<%}%>\r\n    };\r\n\r\n    return <%= pluginID %>;\r\n});"
}});