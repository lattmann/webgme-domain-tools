define([], function() {

    /**
    * A module representing <%- projectName %> domain specific API.
    *
    * Generated on <%- new Date().toString() %> [<%- new Date().toISOString() %>]
    * @exports <%- projectName %>
    * @version 1.0
    */
    var <%- projectName %> = function () {};

    <%- projectName %>.initialize = function (core, storage, META) {
        var name;
        for (name in META) {
            if (META.hasOwnProperty(name)) {
                if (<%- projectName %>.hasOwnProperty(name)) {
                    <%- projectName %>[name].Type = META[name];
                } else {
                    <%- projectName %>[name] = {};
                    <%- projectName %>[name].Type = META[name];
                }
            }
        }

        <%- projectName %>._core = core;
        <%- projectName %>._storage = storage;
    };


<% for (var metaType in metaTypes) {
    if (metaTypes.hasOwnProperty(metaType)) {
        var metaTypeName = metaTypes[metaType].name;
        var ID = metaTypes[metaType].ID;
        var GUID = metaTypes[metaType].GUID;
        var Hash = metaTypes[metaType].Hash;
        var attributeNames = metaTypes[metaType].attributeNames;
        var registryNames = metaTypes[metaType].registryNames;


        var isConnection = metaTypes[metaType].isConnection;
        var children = metaTypes[metaType].children;
%>
    //<editor-fold desc="<%- metaTypeName %>">

    /**
    * Initializes a new instance of <%- metaTypeName %>.
    *
    * @class
    * @classdesc This class represents a(n) <%- metaTypeName %>.
    * @param {FCO} nodeObj The wrapped WebGME object.
    * @constructor
    */
    <%- projectName %>.<%- metaTypeName %> = function (nodeObj) {
        this._nodeObj = nodeObj;
        this.Attributes._nodeObj = this._nodeObj;
        this.Registry._nodeObj = this._nodeObj;
    };


    //<editor-fold desc="<%- metaTypeName %> static fields, properties and functions">

    /**
    * WebGME node object that represents <%- metaTypeName %> type.
    * @type {nodeObj}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.Type = null; // this is set by the <%- projectName %>.initialize function

    /**
    * WebGME node object's meta type ID of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.ID = "<%- ID %>";

    /**
    * WebGME node object's meta type GUID of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.GUID = "<%- GUID %>";

    /**
    * WebGME node object's meta type hash value of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.Hash = "<%- Hash %>";

        <%
        if (isConnection) {
        %>

    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent, src, dst) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});
        <%- projectName %>._core.setPointer(nodeObj, 'src', src.getNodeObj());
        <%- projectName %>._core.setPointer(nodeObj, 'dst', dst.getNodeObj());
        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);
    };

        <%
        } else {
        %>

    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});
        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);
    };

        <%
        }
        %>
    //</editor-fold>


    //<editor-fold desc="<%- metaTypeName %> create child objects">
<%
    for (var i = 0; i < children.length; i += 1) {
        var child = metaTypesByID[children[i]];
%>


<%
        if (child.isConnection) {
    // FIXME: this is still buggy
%>
        <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function (src, dst) {
            return <%- projectName %>.<%- child.name %>.createObj(this, src, dst);
        };

<%
        } else {
%>

    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function () {
        return <%- projectName %>.<%- child.name %>.createObj(this);
    };

        <%
        }
        %>

<%
    }
%>

    //</editor-fold>

    <%- projectName %>.<%- metaTypeName %>.prototype.getNodeObj = function () { return this._nodeObj; };

    //<editor-fold desc="<%- metaTypeName %> attributes">

    <%- projectName %>.<%- metaTypeName %>.prototype.Attributes = {};

<%
    for (var i = 0; i < attributeNames.length; i += 1) {
       var attributeName = attributeNames[i];
%>
    <%- projectName %>.<%- metaTypeName %>.prototype.Attributes.get<%- attributeName %> = function () {
        return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');
    };

    <%- projectName %>.<%- metaTypeName %>.prototype.Attributes.set<%- attributeName %> = function (value) {
        return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);
    };

<%
    }
%>

    //</editor-fold>


    //<editor-fold desc="<%- metaTypeName %> registry entries">

    <%- projectName %>.<%- metaTypeName %>.prototype.Registry = {};

<%
    for (var i = 0; i < registryNames.length; i += 1) {
        var registryName = registryNames[i];
%>
    <%- projectName %>.<%- metaTypeName %>.prototype.Registry.get<%- registryName %> = function () {
        return <%- projectName %>._core.getRegistry(this._nodeObj, '<%- registryName %>');
    };

    <%- projectName %>.<%- metaTypeName %>.prototype.Registry.set<%- registryName %> = function (value) {
        return <%- projectName %>._core.setRegistry(this._nodeObj, '<%- registryName %>', value);
    };

<%
    }
%>

    //</editor-fold>

    // TODO: DSML connections
    // TODO: DSML references
    // TODO: DSML sets
    // TODO: DSML pointers

    //</editor-fold>

<%
    }
}
%>

    return <%- projectName %>;

});