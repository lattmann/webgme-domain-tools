define([], function() {

    /**
    * A module representing <%- projectName %> domain specific API.
    *
    * Generated on <%- new Date().toString() %> [<%- new Date().toISOString() %>]
    * @exports <%- projectName %>
    * @version 1.0
    */
    var <%- projectName %> = function () {};

    <%- projectName %>.initialize = function (core, storage, META) {
        var name;
        for (name in META) {
            if (META.hasOwnProperty(name)) {
                if (<%- projectName %>.hasOwnProperty(name)) {
                    <%- projectName %>[name].Type = META[name];
                } else {
                    <%- projectName %>[name] = {};
                    <%- projectName %>[name].Type = META[name];
                }
            }
        }

        <%- projectName %>._core = core;
        <%- projectName %>._storage = storage;
    };

    <%- projectName %>.createMETATypesTests = function (core) {
        var META = {};
        var options = {};
        var node = null;

<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {
    var metaTypeName = metaTypes[metaTypeIndex].name;
%>
        options = {};
        node = core.createNode(options);
        core.setAttribute(node, 'name', '<%- metaTypeName %>');
        META['<%- metaTypeName %>'] = node;
<%
}
%>
        return META;
    }

<% for (var metaTypeIndex = 0; metaTypeIndex < metaTypes.length; metaTypeIndex += 1) {
    var metaTypeName = metaTypes[metaTypeIndex].name;
    var ID = metaTypes[metaTypeIndex].ID;
    var GUID = metaTypes[metaTypeIndex].GUID;
    var Hash = metaTypes[metaTypeIndex].Hash;
    var base = metaTypes[metaTypeIndex].base;
    var attributeNames = metaTypes[metaTypeIndex].attributeNames;
    var registryNames = metaTypes[metaTypeIndex].registryNames;


    var isConnection = metaTypes[metaTypeIndex].isConnection;
    var children = metaTypes[metaTypeIndex].children;
%>
    //<editor-fold desc="<%- metaTypeName %>">

    /**
    * Initializes a new instance of <%- metaTypeName %>.
    *
    * @class
    <% if (base) { %>* @augments {<%- base %>}<% } %>
    * @classdesc This class represents a(n) <%- metaTypeName %>.
    * @param {FCO} nodeObj The wrapped WebGME object.
    * @constructor
    */
    <%- projectName %>.<%- metaTypeName %> = function (nodeObj) {
        <%
        if (base) {
        %>
        // Call the constructor of the base-class as if it were acting on this.
        // This call is probably only needed if we want to cache the attributes and registry
        // while not defining them flat here.
        <%- projectName %>.<%- base %>.call(this, nodeObj);
        <%
        }
        %>
        this._nodeObj = nodeObj;
        this.attributes = new <%- projectName %>.<%- metaTypeName %>.prototype.Attributes(this._nodeObj);
        this.registry = new <%- projectName %>.<%- metaTypeName %>.prototype.Registry(this._nodeObj);
    };
    <%
    if (base) {
    %>

    // This will give inheritance when checking types, but META-types must be sorted based on the order of inheritance.
    // If not <%- projectName %>.<%- base %>.prototype could be undefined at this point.
    // <%- projectName %>.<%- metaTypeName %>.prototype = Object.create(<%- projectName %>.<%- base %>.prototype);
    // <%- projectName %>.<%- metaTypeName %>.prototype.constructor = <%- projectName %>.<%- metaTypeName %>;
    <%
    }
    %>

    //<editor-fold desc="<%- metaTypeName %> static fields, properties and functions">

    /**
    * WebGME node object that represents <%- metaTypeName %> type.
    * @type {nodeObj}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.Type = null; // this is set by the <%- projectName %>.initialize function

    /**
    * WebGME node object's meta type ID of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.ID = "<%- ID %>";

    /**
    * WebGME node object's meta type GUID of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.GUID = "<%- GUID %>";

    /**
    * WebGME node object's meta type hash value of <%- metaTypeName %>.
    * @type {string}
    * @static
    */
    <%- projectName %>.<%- metaTypeName %>.Hash = "<%- Hash %>";

        <%
        if (isConnection) {
        %>

    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent, src, dst) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});
        <%- projectName %>._core.setPointer(nodeObj, 'src', src.getNodeObj());
        <%- projectName %>._core.setPointer(nodeObj, 'dst', dst.getNodeObj());
        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);
    };

        <%
        } else {
        %>

    <%- projectName %>.<%- metaTypeName %>.createObj = function (parent) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%- metaTypeName %>.Type});
        return new <%- projectName %>.<%- metaTypeName %>(nodeObj);
    };

        <%
        }
        %>
    //</editor-fold>


    //<editor-fold desc="<%- metaTypeName %> create child objects">
<%
    for (var j = 0; j < children.length; j += 1) {
        var childBad = metaTypesByID[children[j]];

//        if (childBad.isConnection) {
//            console.log('Connection', childBad.name, childBad.isConnection);
//        }
//
//        if (childBad.isAbstract) {
//            console.log('Abstract', childBad.name, childBad.isAbstract);
//            console.log(childBad);
//        }

        // FIXME: we have to get the child in a different way

        var child = null;
        for (var k = 0; k < metaTypes.length; k += 1) {
            if (metaTypes[k].ID === children[j]) {
                child = metaTypes[k];
                if (child.isAbstract) {
                   // console.log(child);
                }
                break;
            }
        }

%>
<%
        if (child.isConnection) {
    // FIXME: this is still buggy
%>

        <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function (src, dst) {
            return <%- projectName %>.<%- child.name %>.createObj(this, src, dst);
        };

<%
        } else {
%>

    <%- projectName %>.<%- metaTypeName %>.prototype.create<%- child.name %> = function () {
        return <%- projectName %>.<%- child.name %>.createObj(this);
    };

        <%
        }
        %>
<%
    }
%>
    //</editor-fold>

    <%- projectName %>.<%- metaTypeName %>.prototype.getNodeObj = function () { return this._nodeObj; };

    // TODO: get Id
    // TODO: get Guid

    //<editor-fold desc="<%- metaTypeName %> attributes">

    <%- projectName %>.<%- metaTypeName %>.prototype.Attributes = function (nodeObj) {
        this._nodeObj = nodeObj;
    };

<%
    for (var i = 0; i < attributeNames.length; i += 1) {
       var attributeName = attributeNames[i];
%>
    <%- projectName %>.<%- metaTypeName %>.prototype.Attributes.prototype.get<%- attributeName %> = function () {
        return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');
    };

    <%- projectName %>.<%- metaTypeName %>.prototype.Attributes.prototype.set<%- attributeName %> = function (value) {
        return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);
    };

    // N.B.This applies to registry too and "Pros and Cons" are not only in respect to the current implementation.
    // Pros:
    // - This will give code-completion after typing e.g. component.attributesG.
    // - It is defined on the prototype and not on each instance.
    // - No need to create an Attribute class in the constructor.
    // Cons:
    // - It is a bit awkward having the attributes "flat" (create%Type% does the same though and children%Type% probably will too).

    //<%- projectName %>.<%- metaTypeName %>.prototype.attributesGet<%- attributeName %> = function () {
    //  return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');
    //};

    //<%- projectName %>.<%- metaTypeName %>.prototype.attributesSet<%- attributeName %> = function (value) {
    //  return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);
    //};

<%
    }
%>

    //</editor-fold>


    //<editor-fold desc="<%- metaTypeName %> registry entries">

    <%- projectName %>.<%- metaTypeName %>.prototype.Registry = function (nodeObj) {
        this._nodeObj = nodeObj;
        };
<%
    for (var i = 0; i < registryNames.length; i += 1) {
        var registryName = registryNames[i];
%>
    <%- projectName %>.<%- metaTypeName %>.prototype.Registry.prototype.get<%- registryName %> = function () {
        return <%- projectName %>._core.getRegistry(this._nodeObj, '<%- registryName %>');
    };

    <%- projectName %>.<%- metaTypeName %>.prototype.Registry.prototype.set<%- registryName %> = function (value) {
        return <%- projectName %>._core.setRegistry(this._nodeObj, '<%- registryName %>', value);
    };

<%
    }
%>

    //</editor-fold>

    // TODO: DSML connections
    // TODO: DSML references
    // TODO: DSML sets
    // TODO: DSML pointers

    //</editor-fold>

<%
}
%>

    return <%- projectName %>;

});