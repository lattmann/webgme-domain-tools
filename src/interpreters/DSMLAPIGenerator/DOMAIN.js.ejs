/**
 * Created by Zsolt on 3/18/14.
 */

define([], function() {

    /**
    * TODO: fill this out correctly...
    * Initializes a new instance of DomainFCO.
    *
    * @namespace
    * @classdesc This class represents the domain specific <%- projectName %> API namespace.
    * @constructor
    */
    var <%- projectName %> = function () {};

    <%- projectName %>.initialize = function (core, storage, META) {
        var name;
        for (name in META) {
            if (META.hasOwnProperty(name)) {
                if (<%- projectName %>.hasOwnProperty(name)) {
                    <%- projectName %>[name].Type = META[name];
                } else {
                    <%- projectName %>[name] = {};
                    <%- projectName %>[name].Type = META[name];
                }
            }
        }

        <%- projectName %>._core = core;
        <%- projectName %>._storage = storage;
    };


<% for (var metaType in metaTypes) {
    if (metaTypes.hasOwnProperty(metaType)) {
        var metaTypeName = metaTypes[metaType].name;
        var ID = metaTypes[metaType].ID;
        var GUID = metaTypes[metaType].GUID;
        var Hash = metaTypes[metaType].Hash;
        var attributeNames = metaTypes[metaType].attributeNames;
        var registryNames = metaTypes[metaType].registryNames;
%>
    /**
    * Initializes a new instance of Property.
    *
    * @class
    * @classdesc This class represents the base-object in a domain specific api.
    * @param {FCO} fco The wrapped webGME object.
    * @constructor
    */
    <%- projectName %>.<%= metaTypeName %> = function (nodeObj) {
        this._nodeObj = nodeObj;
        this.Attributes._nodeObj = this._nodeObj;
        this.Registry._nodeObj = this._nodeObj;
    };

    <%- projectName %>.<%= metaTypeName %>.Type = null; // this is set by the <%- projectName %>.initialize function
    <%- projectName %>.<%= metaTypeName %>.ID = "<%- ID %>";
    <%- projectName %>.<%= metaTypeName %>.GUID = "<%- GUID %>";
    <%- projectName %>.<%= metaTypeName %>.Hash = "<%- Hash %>";



    <%- projectName %>.<%= metaTypeName %>.createObj = function (parent) {
        var nodeObj = <%- projectName %>._core.createNode({parent: parent.getNodeObj(), base: <%- projectName %>.<%= metaTypeName %>.Type});
        return new <%- projectName %>.<%= metaTypeName %>(nodeObj);
    };

    // TODO: DSML child objects

    <%- projectName %>.<%= metaTypeName %>.prototype.getNodeObj = function () { return this._nodeObj; };

    <%- projectName %>.<%= metaTypeName %>.prototype.Attributes = {};

<%
    for (var i = 0; i < attributeNames.length; i += 1) {
       var attributeName = attributeNames[i];
%>
    <%- projectName %>.<%= metaTypeName %>.prototype.Attributes.get<%- attributeName %> = function () {
        return <%- projectName %>._core.getAttribute(this._nodeObj, '<%- attributeName %>');
    };

    <%- projectName %>.<%= metaTypeName %>.prototype.Attributes.set<%- attributeName %> = function (value) {
        return <%- projectName %>._core.setAttribute(this._nodeObj, '<%- attributeName %>', value);
    };

<%
    }
%>

    <%- projectName %>.<%= metaTypeName %>.prototype.Registry = {};

<%
    for (var i = 0; i < registryNames.length; i += 1) {
        var registryName = registryNames[i];
%>
    <%- projectName %>.<%= metaTypeName %>.prototype.Registry.get<%- registryName %> = function () {
        return <%- projectName %>._core.getRegistry(this._nodeObj, '<%- registryName %>');
    };

    <%- projectName %>.<%= metaTypeName %>.prototype.Registry.set<%- registryName %> = function (value) {
        return <%- projectName %>._core.setRegistry(this._nodeObj, '<%- registryName %>', value);
    };

<%
    }
%>

    // TODO: DSML connections
    // TODO: DSML references
    // TODO: DSML sets
    // TODO: DSML pointers

<%
    }
}
%>

    return <%- projectName %>;

});